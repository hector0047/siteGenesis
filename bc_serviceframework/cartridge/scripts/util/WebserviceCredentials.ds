/** @module bc_serviceframework/cartridge/scripts/util/WebserviceCredentials */

/**
 *	Holds all necessary information which are used to establish a connection to a reomte system
 *  @alias module:bc_serviceframework/cartridge/scripts/util/WebserviceCredentials
 */
function WebserviceCredentials(customObject) {
	if (empty(customObject)) {
		throw new Error("No credentials for webservice given");	
	}
	this.url = customObject.custom.url;
	this.user = customObject.custom.user;
	this.credentialsType = customObject.custom.credentialsType;
	// fallback handling for legacy configurations
	if(this.credentialsType == "WSDL"){
		this.credentialsType = "URL";
	}
	this.password = customObject.custom.password;
	this.custom = {};
	if ('custom' in customObject.custom && !empty(customObject.custom.custom)) {
		try	{
			this.custom =  JSON.parse(customObject.custom.custom);
		}
		catch(e){
			throw new Error("Can't parse custom data from credentials object");
		}
	};
}

WebserviceCredentials.prototype = {
	
	/**
	*	returns an URL, if one was set at the credentials object
	*	@returns {String} Defined URL or null
	*/
	getUrl : function() {
		return this.url;
	},
	
	/**
	*	returns the credentials type
	*	@returns {String}
	*/
	getCredentialsType : function() {
		return this.credentialsType;
	},
	
	/**
	*	returns the username of this service
	*	@returns {String}
	*/
	getUser : function() {
		return this.user;
	},
	/**
	*	returns the password of this service
	*	@returns {String}
	*/
	getPassword : function() {
		return this.password;
	},
	/**
	*	returns the customData of this service
	*	@returns {Object}
	*/
	getCustom : function() {
		return this.custom;
	},  
	/**
	*	sets the username of this service
	*/
	setUser : function(user) {
		this.user = user;
	},
	/**
	*	sets the password of this service
	*/
	setPassword : function(password) {
		this.password = password;
	},
	/**
	*	sets the custom data of this service
	*/
	setCustom : function(custom) {
		this.custom = custom;
	}
}

module.exports = WebserviceCredentials;