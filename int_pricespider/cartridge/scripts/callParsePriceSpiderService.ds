/**
* 
*
* For example:
*
*   @input siteID : String siteID to use as asset prefix
*	@input CurrentWorkflowComponentInstance : Object The current workflow component instance
*   @output csvreportpath : String URL from which to pull content
*   @output filenm : String URL from which to pull content
*   @output dateTime : String
*   @output mailSub : String
*/

importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.customer );
importPackage( dw.io );
importPackage( dw.svc );
importPackage( dw.net );
importPackage( dw.object );
importPackage( dw.campaign );
importPackage( dw.web );
importPackage( dw.crypto );

var uri : String = "http://www.demandware.com/xml/impex/library/2006-10-31";

function execute( args : PipelineDictionary ) : Number
{

	//var siteID : String = args.siteID;
	var CurrentWorkflowComponentInstance : Object = args.CurrentWorkflowComponentInstance;
	var cat : Catalog = dw.catalog.CatalogMgr.siteCatalog;
	var productList : SeekableIterator = dw.catalog.ProductMgr.queryProductsInCatalogSorted(cat);
	
	var includeWarranty : Boolean = CurrentWorkflowComponentInstance.getParameterValue('includeWarranty');
	var includeSupport : Boolean = CurrentWorkflowComponentInstance.getParameterValue('includeSupport');
	var includeAccessory : Boolean = CurrentWorkflowComponentInstance.getParameterValue('includeAccessory');
	var includeOffline : Boolean = CurrentWorkflowComponentInstance.getParameterValue('includeOffline');
	/*var includeOutOfStock : Boolean = CurrentWorkflowComponentInstance.getParameterValue('includeOutOfStock');*/
	var includeRefurbished : Boolean = CurrentWorkflowComponentInstance.getParameterValue('includeRefurbished');

	try{
		
		var file_path : Boolean = CurrentWorkflowComponentInstance.getParameterValue('filePath');
		
		var calendar : Calendar = new Calendar();
		calendar.timeZone = "US/Eastern";
		var dateString : String = dw.util.StringUtils.formatCalendar(calendar, "_MM/dd/yyyy_h:mm:sa").toUpperCase();
		var flnm : String = dateString.replace("_", " ").replace("_", " ");
		dateString = dateString.replace("/", "").replace("/", "").replace(":", "").replace(":", "");
		var path : String = File.IMPEX + File.SEPARATOR + file_path + File.SEPARATOR + "PriceSpiderPricebook.xml";
		
		var csvpath : String = File.IMPEX + File.SEPARATOR + file_path + File.SEPARATOR + "PriceSpiderReport" + dateString + ".csv";
		var filenm : String = "PriceSpiderReport" + dateString + ".csv";
		args.csvreportpath = csvpath;
		args.filenm = filenm;
		
		var dateTime : String = dw.util.StringUtils.formatCalendar(new Calendar(), "MM/dd/yyyy h:mm a").toUpperCase();
		
		args.dateTime = flnm;
		var mailSubPref : String = dw.system.Site.getCurrent().getCustomPreferenceValue('priceSpiderReportmailSubject');
		args.mailSub = dw.util.StringUtils.format(mailSubPref, flnm);
		
		var csvfile : File = new File(csvpath);
		var csvfileWriter : FileWriter = new FileWriter(csvfile);
		var csw : CSVStreamWriter = new CSVStreamWriter(csvfileWriter, ",");
		var csvheadEmpty : Array = new Array("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "");
		csw.writeNext(csvheadEmpty);
		var csvheadArray : Array = new Array("", "Product ID", "Category", "On price spider (Y/N)", "MSRP", "Threshold", "Previous Sale Price", "New Sale Price", "Change", "Source", "B&H Photo", "Amazon.Com", "Unique Photo", "Target", "Adorama", "Tigerdirect", "Staples", "Samy's Camera", "Best Buy", "Nebraska Furniture Mart", "Newegg.com", "Walmart", "Kmart", "Fry's Electronics", "QVC", "Sears");
		//var csvhead : String = "Sr, ProductID, Sale price, Threshold price, MSRP price, Lowest retailer’s price, Retailer’s name, Final sale price, Updated from";
		csw.writeNext(csvheadArray);
		
		var count : Number = 1;
				
		var file : File = new File( path );
		var priceBookId : String = "shop-pna-sale-price";
	 	var fileWriter : FileWriter = new FileWriter(file, "UTF-8");
	 	var xsw : XMLStreamWriter = new XMLStreamWriter(fileWriter);
	 	xsw.writeStartDocument("UTF-8", "1.0");
		xsw.writeStartElement("pricebooks");
		xsw.writeDefaultNamespace("http://www.demandware.com/xml/impex/pricebook/2006-10-31");
		var PriceBookMgr : PriceBookMgr = dw.catalog.PriceBookMgr;
		var priceBook : PriceBook = PriceBookMgr.getPriceBook(priceBookId);
		
		xsw.writeStartElement("pricebook");
			xsw.writeStartElement("header");
			xsw.writeAttribute("pricebook-id", priceBook.ID);
				xsw.writeStartElement("currency");
					xsw.writeCharacters(priceBook.getCurrencyCode());
				xsw.writeEndElement();
				xsw.writeStartElement("online-flag");
					xsw.writeCharacters(priceBook.online);
				xsw.writeEndElement();
				xsw.writeStartElement("parent");
					xsw.writeCharacters(priceBook.getParentPriceBook().ID);
				xsw.writeEndElement();
			xsw.writeEndElement();
			
			xsw.writeStartElement("price-tables");    
		
		while(productList.hasNext()) {
			
			var product : Product = productList.next();
			var productID : String = product.ID;
			
			var allPrices : String = ""; 
		
			var productOnline : Boolean = false;
			/*var productAvailable : Boolean = false;*/
			var productSupport : Boolean = false;
			var productWarranty : Boolean = false;
			var productAccessory : Boolean = false;
			var productRefurbished : Boolean = false;
			
			if(includeOffline || product.online)
				productOnline = true;
			
			/*if(includeOutOfStock || product.availabilityModel.availability > 0)
				productAvailable = true;*/
			
			if(includeSupport || !product.custom.supportOnly)
				productSupport = true;
			
			if(includeWarranty || !product.custom.isWarranty)
				productWarranty = true;
			
			if(includeAccessory || !product.custom.isAccessory)
				productAccessory = true;
			
			if(includeRefurbished || !product.custom.isRefurbished)
				productRefurbished = true;
			
			var priceModel : ProductPriceModel = product.getPriceModel();
			
			var salePrice : String = priceModel.getPriceBookPrice('shop-pna-sale-price');
			var listPrice : String = priceModel.getPriceBookPrice('shop-pna-list-price');
			var thresoldPrice : String = priceModel.getPriceBookPrice('shop-pna-thresold-price');
			
	   		var cat : String = "";
		   	if(product.getPrimaryCategory())
		   		cat = product.getPrimaryCategory().ID;
		   		
		   	var csvStr : Array = new Array();
		   	
		   	if(!product.custom.disable_dynamic_price)
		   		var flg = "Y";
		   	else
		   		var flg = "N";
		   	
			if( !product.master && productSupport && productWarranty && productAccessory && productRefurbished )
		   	{
				var newSale : Number = null;
				var updatedFrom : String = "";
				var changePrc : Number = null;
				var a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p : String;
				a=""; b=""; c="";d="";e="";f="";g="";h="";i="";j="";k="";l="";m="";n="";o="";p="";
				
				if(salePrice.value === 0 && listPrice.value > 0 && !product.custom.disable_dynamic_price)
				{
					xsw.writeStartElement("price-table");
					xsw.writeAttribute("product-id", productID);
						xsw.writeStartElement("amount");
						xsw.writeAttribute("quantity", "1");
							xsw.writeCharacters(listPrice.value);
						xsw.writeEndElement();
					xsw.writeEndElement();
					newSale = listPrice.value;
					updatedFrom = "MSRP";
					changePrc = newSale ? newSale - salePrice.value : "";
				}
				
				csvStr = new Array( count, productID, cat, flg, listPrice.value, thresoldPrice.value, salePrice.value, newSale, changePrc, updatedFrom, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "" );

					var jsontxt : Object = JSON.parse(getSellerPrices(productID));
					
					var retailersList : Array = product.custom.listOfCompetitiveRetailers;
					var sellers : ArrayList = jsontxt.ProductsOnlineSellers[0].Sellers;
					var finalSalePrice : Number = null;
				
					if(jsontxt && sellers)
					{
						var sellerPrice : Array = new Array();
						
						for each (var seller : Object in sellers)
						{
							//var sellerComb : Object = new Object();
							if ( retailersList.indexOf(seller['SellerName']) != -1 && seller['Price'] > 0 )
							{
								var sellerComb : Object = {name:seller['SellerName'], price:seller['Price']};
								sellerPrice.push(sellerComb);
								
							}
							
							if ( seller['Price'] > 0 )
							{
								switch ( seller['SellerName'] )
								{
									case "B&H Photo":	
										a = seller['Price'];
										break;	
									case "Amazon.Com":	
										b = seller['Price'];
										break;	
									case "Unique Photo":								
										c = seller['Price'];
										break;	
									case "Target":
										d = seller['Price'];
										break;				
									case "Adorama":
										e = seller['Price'];
										break;				
									case "Tigerdirect":
										f = seller['Price'];
										break;	
									case "Staples":
										g = seller['Price'];
										break;
									case "Samy's Camera":
										h = seller['Price'];
										break;
									case "Best Buy":
										i = seller['Price'];
										break;						
									case "Nebraska Furniture Mart":
										j = seller['Price'];
										break;			
									case "Newegg.com":
										k = seller['Price'];
										break;			
									case "Walmart":
										l = seller['Price'];
										break;			
									case "Kmart":
										m = seller['Price'];
										break;			
									case "Fry's Electronics":
										n = seller['Price'];
										break;			
									case "QVC":
										o = seller['Price'];
										break;			
									case "Sears":
										p = seller['Price'];
										break;			
								}
							}
						}
						
						if(sellerPrice.length)
						{
							sellerPrice.sort(function(a, b){ return a.price-b.price	});
							
							//var minPrice : Money = getLeastPromotionalPrice(product);
							
							var sellerName : String = sellerPrice[0].name;
							var sellerPrc : String = sellerPrice[0].price;
							
							if(thresoldPrice.value == salePrice.value && sellerPrc < thresoldPrice.value)
							{
								var updatedFrom : String = "";
								finalSalePrice = salePrice.value;							
							}
							else if(sellerPrc < thresoldPrice.value)
							{
								var updatedFrom : String = "Threshold";
								finalSalePrice = thresoldPrice.value;
							}
							else if(sellerPrc != salePrice.value)
							{
								var updatedFrom : String = "Retailer";
								finalSalePrice = sellerPrc;
							}
							else
							{
								var updatedFrom : String = "";
								finalSalePrice = salePrice.value;
							}
							
							var onsell : Array = new Array();
							for each (var oneseller : Object in sellerPrice)
							{
								var onsellstr : String = oneseller.name + " (" + oneseller.price + ")";
								onsell.push(onsellstr);
							}
							var allPrices : String = onsell.join(", ");
						}
						else if(listPrice.value > 0  && listPrice.value > salePrice.value)
						{
							var updatedFrom : String = "MSRP";
							finalSalePrice = listPrice.value;
							var sellerName : String = "";
							var sellerPrc : String = "";
						}
						else
						{
							var updatedFrom : String = "";
							finalSalePrice = "";
							var sellerName : String = "";
							var sellerPrc : String = "";
						}
					}
					else if(listPrice.value > 0  && listPrice.value > salePrice.value)
					{
						var updatedFrom : String = "MSRP";
						finalSalePrice = listPrice.value;
						var sellerName : String = "";
						var sellerPrc : String = "";
					}
					else
					{
						var updatedFrom : String = "";
						finalSalePrice = "";
						var sellerName : String = "";
						var sellerPrc : String = "";
					}
					
					if (updatedFrom == "Retailer")
						updatedFrom = sellerName;
					
					if (!product.custom.disable_dynamic_price)
						csvStr = new Array( count, productID, cat, flg, listPrice.value, thresoldPrice.value, salePrice.value, finalSalePrice, finalSalePrice ? finalSalePrice - salePrice.value : "", updatedFrom, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p );
					else
						csvStr = new Array( count, productID, cat, flg, listPrice.value, thresoldPrice.value, salePrice.value, "", "", "", a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p );
				   	
					a=""; b=""; c="";d="";e="";f="";g="";h="";i="";j="";k="";l="";m="";n="";o="";p="";
					
					if(finalSalePrice > 0 && !product.custom.disable_dynamic_price)
					{
						xsw.writeStartElement("price-table");
						xsw.writeAttribute("product-id", productID);
							xsw.writeStartElement("amount");
							xsw.writeAttribute("quantity", "1");
								xsw.writeCharacters(finalSalePrice);
							xsw.writeEndElement();
						xsw.writeEndElement();
					}
				
				csw.writeNext(csvStr);
		   		count++;
		}
		
	}
	xsw.writeEndElement();
	xsw.writeEndElement();
	xsw.writeEndElement();
	xsw.writeEndDocument();
	xsw.flush();
	xsw.close();
	fileWriter.close();
	csw.close();
	csvfileWriter.close();
	
	}catch(ex) {
		Logger.error("[callParsePriceSpiderService.ds] Error in file ( {0} )",ex.message);
		return PIPELET_ERROR;
	}

	return PIPELET_NEXT;

}

function getSellerPrices(pid: String)
{
	
	//var PSservice : Service = ServiceRegistry.get("PriceSpider");
	var url :String = dw.system.Site.getCurrent().getCustomPreferenceValue("PriceSpiderApiUrl").toString();
	var confId : String = dw.system.Site.getCurrent().getCustomPreferenceValue("PriceSpiderApiConfigurationId").toString();
	var countryCode : String = dw.system.Site.getCurrent().getCustomPreferenceValue("PriceSpiderApiCountry").toString();
	url = url + "?apiConfigurationId=" + confId + "&skuList=" + countryCode + "_" + pid;
	//PSservice.setURL(url);

	//var resp : String = PSservice.call();

	/*var PriceSpider : Function =
		require('/int_pricespider/cartridge/scripts/PriceSpiderService.ds').PriceSpider,
		contents : String = PriceSpider("US_RP-HC800-K");

	var cntnt = contents;*/

	url = url.replace(" ", "%20");
	var httpClient : dw.net.HTTPClient = new dw.net.HTTPClient();
	
	httpClient.timeout = 10000;
	httpClient.open('GET', url);
	httpClient.send();
	return httpClient.text;
	
	
}

function getLeastPromotionalPrice (product){
	
	var promotions : ArrayList = new ArrayList(dw.campaign.PromotionMgr.getActivePromotions().getProductPromotions( product ));
	var minPromotionalPrice : Money = promotions.size() > 0 ? promotions[0].getPromotionalPrice(product): dw.value.Money.NOT_AVAILABLE;
	
	for each( var promotion in promotions ){
		var promotionalPrice : Money = promotion.getPromotionalPrice(product);
		if(promotionalPrice.value != 0 && promotionalPrice.value < minPromotionalPrice.value){
			minPromotionalPrice =  promotionalPrice;
		}
	}
	
	return minPromotionalPrice;
}