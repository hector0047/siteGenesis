/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*
* 	 @output ExportedFile : dw.io.File
*
*/
importPackage(dw.system);
importPackage(dw.io);
importPackage(dw.catalog);

function execute( args : PipelineDictionary ) : Number
{
	try{
		/** STEP:1 IMPEX folder file to export to price spider**/
		var spiderFolder : File = new File(File.IMPEX +'/src/pricespiderexport');
		spiderFolder.mkdir();
		var priceSpiderExportImpex : dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "src" + dw.io.File.SEPARATOR + "pricespiderexport" + dw.io.File.SEPARATOR + "PanasonicDataFeed.xml");
		
		
		/** STEP:2 Get all site products and prepare xml**/
		var fileWriter : FileWriter = new FileWriter(priceSpiderExportImpex, "UTF-8");
		var xmlWriter : XMLIndentingStreamWriter  = new XMLIndentingStreamWriter(fileWriter);
		xmlWriter.writeStartDocument("UTF-8", "1.0");// <?xml version="1.0" encoding="UTF-8"?>
		xmlWriter.writeStartElement("PanasonicProducts");//<PanasonicProducts> : starts
		xmlWriter.writeStartElement("Country");//<Country code="US"> : strats
		xmlWriter.writeAttribute("code","US");
		
		var productList : SeekableIterator = ProductMgr.queryAllSiteProducts();
		while(productList.hasNext()) {
			var product : Product = productList.next();
			var isCategoryAvailable : Boolean = ((!empty(product.getPrimaryCategory()) && product.getPrimaryCategory() != null) || (!empty(product.getClassificationCategory()) && product.getClassificationCategory() != null))?true:false;
		 /** STEP:3 Condtion check for pricespider status & categorized **/	
		 if(isCategoryAvailable && getPriceSpiderStatus(product) && !product.isMaster()){	
			
			xmlWriter.writeStartElement("Product");//<Product> : strats
			
			var mName : String = "Panasonic";
			var productID : String = product.ID;
			var upc : String ="";
			if(!empty(product.getUPC())){
				upc = product.getUPC();
			}
			var catID : String ="";
			if(!empty(product.getPrimaryCategory()) && product.getPrimaryCategory() != null){
				catID = product.getPrimaryCategory().ID;
			}else if(!empty(product.getClassificationCategory()) && product.getClassificationCategory() != null){
				catID = product.getClassificationCategory().ID;
			}
			
			
			
			//Start writing prodcut info in xml file
			xmlWriter.writeStartElement("manufacturerName");
			xmlWriter.writeCharacters(mName);
			xmlWriter.writeEndElement();
			
			xmlWriter.writeStartElement("sku");
			xmlWriter.writeCharacters(productID);
			xmlWriter.writeEndElement();
			
			xmlWriter.writeStartElement("productUniqueId");
			xmlWriter.writeCharacters(productID);
			xmlWriter.writeEndElement();
			
			xmlWriter.writeStartElement("model");
			xmlWriter.writeCharacters(productID);
			xmlWriter.writeEndElement();
			
			xmlWriter.writeStartElement("productName");
			xmlWriter.writeCharacters(productID);
			xmlWriter.writeEndElement();
			
			if(!empty(upc) && upc.length > 0){
				xmlWriter.writeStartElement("upc");
				xmlWriter.writeCharacters(productID);
				xmlWriter.writeEndElement();
			}
			
			xmlWriter.writeStartElement("shortDescription");
			xmlWriter.writeCharacters(productID);
			xmlWriter.writeEndElement();
			
			//Space for  category
			if(catID.length > 0){
				xmlWriter.writeStartElement("category");
				xmlWriter.writeCharacters(catID);
				xmlWriter.writeEndElement();
			}
			
			//Hardcoding Map Settings:
			xmlWriter.writeStartElement("MAPSettings");
			xmlWriter.writeStartElement("MAP");
			xmlWriter.writeCharacters("0");
			xmlWriter.writeEndElement();
			xmlWriter.writeEndElement();
			
			if(('supportOnly' in product.custom && product.custom.supportOnly) && ('priceSpiderExported' in product.custom && product.custom.priceSpiderExported)){
			
			//Updating action element
				xmlWriter.writeStartElement("action");
				xmlWriter.writeCharacters("Remove");
				xmlWriter.writeEndElement();
			//Updating product exported status
				if(product.describe().getCustomAttributeDefinition('priceSpiderExported') instanceof dw.object.ObjectAttributeDefinition){
				    product.custom.priceSpiderExported = false;
				}
			
			}else if(('isAccessory' in product.custom && product.custom.isAccessory) && ('priceSpiderExported' in product.custom && product.custom.priceSpiderExported)){
			//Updating action element
				xmlWriter.writeStartElement("action");
				xmlWriter.writeCharacters("Remove");
				xmlWriter.writeEndElement();
			//Updating product exported status
				if(product.describe().getCustomAttributeDefinition('priceSpiderExported') instanceof dw.object.ObjectAttributeDefinition){
				    product.custom.priceSpiderExported = false;
				}
			
			}else if(!('supportOnly' in product.custom && product.custom.supportOnly) && !('isAccessory' in product.custom && product.custom.isAccessory) && !('priceSpiderExported' in product.custom && product.custom.priceSpiderExported)){
			//Updating action element
				xmlWriter.writeStartElement("action");
				xmlWriter.writeCharacters("Add");
				xmlWriter.writeEndElement();
			//Updating product exported status
				if(product.describe().getCustomAttributeDefinition('priceSpiderExported') instanceof dw.object.ObjectAttributeDefinition){
				    product.custom.priceSpiderExported = true;
				}
			}else{
				/* NOT REQUIRED
				
					xmlWriter.writeStartElement("action");
					xmlWriter.writeCharacters("Add");
					xmlWriter.writeEndElement();
				
					if(product.describe().getCustomAttributeDefinition('priceSpiderExported') instanceof dw.object.ObjectAttributeDefinition){
					    product.custom.priceSpiderExported = true;
					}
					
				*/	
			}
			xmlWriter.writeEndElement();// <Product> : ends 	
		  }	
		}
		
	  xmlWriter.writeEndElement();// <Country> : ends	
	  xmlWriter.writeEndElement();// <PanasonicProducts> : ends
	  
	  //closing the connections
		if(xmlWriter != null){
			xmlWriter.close();
		}
		if(fileWriter != null){
			fileWriter.close();
		}
	  
	}catch(e){
		var error = e;
		if(xmlWriter != null){
			xmlWriter.close();
		}
		if(fileWriter != null){
			fileWriter.close();
		}
	  
		return PIPELET_ERROR;
	}
   args.ExportedFile = priceSpiderExportImpex;
   return PIPELET_NEXT;
}

function getPriceSpiderStatus(product : Product) {
	 var flag :  Boolean = false;
			if(('supportOnly' in product.custom && product.custom.supportOnly) && ('priceSpiderExported' in product.custom && product.custom.priceSpiderExported)){
				flag = true;
			}else if(('isAccessory' in product.custom && product.custom.isAccessory) && ('priceSpiderExported' in product.custom && product.custom.priceSpiderExported)){
				flag = true;
			}else if(!('supportOnly' in product.custom && product.custom.supportOnly) && !('isAccessory' in product.custom && product.custom.isAccessory) && !('priceSpiderExported' in product.custom && product.custom.priceSpiderExported)){
				flag= true;
			}else{
			 //Don't do anything
			}
	 return flag;		
}
