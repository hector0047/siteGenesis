/**
* Get info about imported IM Areas
*
* @input SearchPhrase : String
* @input SelectedAreaIDs : String
* @input SelectedAreaID : String
* @input CurrentPageFromHttpParams : Number
* @input OrderBy : String
*
* @output ImportedIMAreas : dw.util.Collection
* @output ImportedSelectedIMAreas : dw.util.Collection
* @output OfflineIMAreas : dw.util.Collection
* @output NeedUpdatesIMAreas : dw.util.Collection
* @output AssociatedGroups : dw.util.Collection
* @output CurrentIdex : Number
* @output ErrorMsg : String
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.net );
importPackage( dw.content );

importScript( "amplience/AmplienceIMHelper.ds" );

function execute( args : PipelineDictionary ) : Number
{
	try {

		/**
		 * Get Custom Preferences
		 */
		var customPreferences = dw.system.Site.getCurrent().getPreferences().custom;
		
		var ampApiURL : String = customPreferences['ampAPI'];
		var ampAPIUser : String = customPreferences['ampAPIUser'];
		var ampAPIPassword : String = customPreferences['ampAPIPassword'];
		var ampIMApiURL : String = customPreferences['ampIMAPI'];
		var searchPhrase : String = args.SearchPhrase;
		var selectedAreaIDs : Array = empty(args.SelectedAreaIDs) ? [] : args.SelectedAreaIDs.split(',');
		var selectedAreaID : String = args.SelectedAreaID;
		var orderBy : String = args.OrderBy;

		var params = {
			username : ampAPIUser,
			password : ampAPIPassword,
			ampApiURL : ampApiURL,
			ampIMApiURL : ampIMApiURL,
			searchPhrase : searchPhrase,
			selectedAreaIDs : selectedAreaIDs,
			selectedAreaID : selectedAreaID,
			orderBy : orderBy
		};
		
		var amplienceIMHelper : AmplienceIMHelper = new AmplienceIMHelper(params);

		var importedIMAreas : Object = amplienceIMHelper.getImportedIMAreas();

		args.ImportedIMAreas = importedIMAreas.availableImportedIMAreas;
		args.ImportedSelectedIMAreas = importedIMAreas.selectedImportedIMAreas;
		args.OfflineIMAreas = importedIMAreas.offlineIMAreas;
		args.NeedUpdatesIMAreas = importedIMAreas.needUpdatesIMAreas;
		args.AssociatedGroups = importedIMAreas.associatedGroups;
		
		var currentIdex = new Number(args.CurrentPageFromHttpParams);
		if ( !empty(args.SelectedAreaID) && importedIMAreas.availableImportedIMAreas.length > 10 ) {
		
			currentIdex = (importedIMAreas.currentImportedAreaIndex > 0) ? (importedIMAreas.currentImportedAreaIndex - 1) : importedIMAreas.currentImportedAreaIndex;
		}
		
		args.CurrentIdex = currentIdex;
		
	} catch(e) {
		var errMsg = 'LoadImportedIMAreas.ds : ' + e.message;
		args.ErrorMsg = errMsg;
		Logger.error(errMsg);
		return PIPELET_ERROR;
	}

   return PIPELET_NEXT;
}
