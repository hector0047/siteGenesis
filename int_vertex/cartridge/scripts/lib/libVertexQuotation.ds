/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);
importPackage(dw.web);
importPackage(dw.customer);

var VertexQuotationHelper = {
	
	
	getUsername : function () {
		return Site.getCurrent().getCustomPreferenceValue("VertexUsername");
	},	
	
	getPassword : function () {
		return Site.getCurrent().getCustomPreferenceValue("VertexPassword");
	},	
	
	gettrustedID : function(){
		return Site.getCurrent().getCustomPreferenceValue("VertexTrustedID");
	},
	getEndpoint : function() {
		 var webref : WebReference = webreferences.vt;
   		 var service : Stub = webref.getDefaultService();
   		 return service;
	},


	getSellerLocationCode : function()  {
		return Site.getCurrent().getCustomPreferenceValue("VertexSellerLocationCode");
	},

	getSellerCompany : function()  {
		return Site.getCurrent().getCustomPreferenceValue("VertexSellerCompany");
	},
	
	getTransactionType : function()  {
		return Site.getCurrent().getCustomPreferenceValue("VertexTransactionType");
	},

	getWebRef : function()  {
		var webref : WebReference = webreferences.vt;
		return webref;
	},
	/*****************************************************************************	
	 * basket  : Basket 
	 *****************************************************************************/	
	
	getQuotationResponseObject : function (basket : Basket){
		var webref : WebReference = webreferences.vt;
   		var service : Stub = VertexQuotationHelper.getEndpoint()
  	
  		var login = new webref.LoginType();
  		/*login.setUserName(VertexQuotationHelper.getUsername());
  		login.setPassword(VertexQuotationHelper.getPassword());
  		*/  		
  		login.setTrustedId(VertexQuotationHelper.gettrustedID());
  		//The actual request object to be passed over
  		var quotationRequestType = new webref.QuotationRequestType();
		
		//The seller data
		var sellerType = new webref.SellerType();
  		var physicalOrigin = new webref.LocationType();
  		physicalOrigin.setLocationCode(VertexQuotationHelper.getSellerLocationCode());
  		sellerType.setCompany(VertexQuotationHelper.getSellerCompany());
  		sellerType.setPhysicalOrigin(physicalOrigin);
 
 		//customer data
 
 		var customer = new webref.CustomerType();
  		var destination = new webref.LocationType(); 
 
 		var billingAddress : OrderAddress = basket.getBillingAddress();
  		destination.streetAddress1=billingAddress.getAddress1();
  		destination.city=billingAddress.getCity();
  		destination.mainDivision=billingAddress.getStateCode();
  		destination.postalCode=billingAddress.getPostalCode();
  		destination.country=billingAddress.getCountryCode();
  		customer.setDestination(destination);
 
		//LineItem(s) data
		
		var _items : Array = new Array();
		
		var  p_items : Collection =  basket.getProductLineItems();
		
		
		var line : ProductLineItem;
		
		for each ( line in p_items){
			var lineitem = new webref.LineItemQSIType();
  			var product = new webref.Product(line.getProductName());
  			product.setProductClass("1111");
  			lineitem.setProduct(product);
  	
  			var extendedPrice = new webref.AmountType();
  			extendedPrice.set_value(line.getPriceValue());
  			lineitem.setExtendedPrice(extendedPrice);
  			_items.push(lineitem);
  			
		}
		
		quotationRequestType.setTransactionType(webref.SaleTransactionType.fromString(VertexQuotationHelper.getTransactionType()));
  		quotationRequestType.setSeller(sellerType)
  		quotationRequestType.setCustomer(customer);
  		quotationRequestType.setLineItem(_items);
  		
  		
  		
  		var envelope = new webref.VertexEnvelope();
  		envelope.setLogin(login);
  		envelope.setQuotationRequest(quotationRequestType);
		var envret = service.calculateTax60(envelope);
  		
		return envret.getQuotationResponse();
				
		
	},

	getTaxAreaResponseObject : function (basket : Basket){
		
		var billingAddress : OrderAddress = basket.getBillingAddress();
		var login = new this.webref.LoginType();
		/*login.setUserName(VertexQuotationHelper.getUsername());
  		login.setPassword(VertexQuotationHelper.getPassword());*/
  		login.setTrustedId(VertexQuotationHelper.gettrustedID());
		
		var taxAreaRequestType = new this.webref.TaxAreaRequestType();
		var lookup = new this.webref.TaxAreaLookupType();
		
		var address = new this.webref.PostalAddressType();
		address.streetAddress1=billingAddress.getAddress1();
  		address.city=billingAddress.getCity();
  		address.mainDivision=billingAddress.getStateCode();
  		address.postalCode=billingAddress.getPostalCode();
  		address.country=billingAddress.getCountryCode();
		lookup.setPostalAddress(address);
		lookup.setAsOfDate(new Date());
		taxAreaRequestType.setTaxAreaLookup(lookup);
			
		var envelope = new this.webref.VertexEnvelope();
  		envelope.setLogin(login);
		envelope.setTaxAreaRequest(taxAreaRequestType);
		var envret = this.service.calculateTax60(envelope);			
		return envret.getTaxAreaResponse();
	
	
	
	},
	
	
	getTaxes : function(basket : Basket){
		var quotationResponseArray = new Array();
		var webref : WebReference = webreferences.vt;
   		var service : Stub = VertexQuotationHelper.getEndpoint()

  		var login = new webref.LoginType();
  		login.setUserName(VertexQuotationHelper.getUsername());
  		login.setPassword(VertexQuotationHelper.getPassword());
  	
  		//The actual request object to be passed over
  		var quotationRequestType = new webref.QuotationRequestType();
		
		//The seller data
		var sellerType = new webref.SellerType();
  		var physicalOrigin = new webref.LocationType();
  		physicalOrigin.setLocationCode(VertexQuotationHelper.getSellerLocationCode());
  		sellerType.setCompany(VertexQuotationHelper.getSellerCompany());
  		sellerType.setPhysicalOrigin(physicalOrigin);
 
		var webref : WebReference = VertexQuotationHelper.getWebRef();
   		var service : Stub = VertexQuotationHelper.getEndpoint();
	
		// Array for holding tax request response objects, to avoid multiple requests.
		var taxItemsArray : Array = new Array();
	
		//iterate through the each shipment in the basket to create line item array.
		for each (var shipment : Shipment in basket.shipments) {
			if (shipment.productLineItems.empty){
				// no line items for this shipment
				// to be handled later
			} else {
				// get all product line items for this shipment
				for each (var productLineItem : ProductLineItem in shipment.productLineItems) {
					// create a tax request response object and set the values
					
					var lineitem = new webref.LineItemQSIType();
  					//var product = new webref.Product(productLineItem.getProductName());
  					var product = new webref.Product(productLineItem.getProductID());
  					product.setProductClass(productLineItem.product.taxClassID);
  					lineitem.setProduct(product);
  					lineitem.setLineItemId(productLineItem.getProductID());
  					var extendedPrice = new webref.AmountType();
		  			extendedPrice.set_value(productLineItem.getPriceValue());
		  			lineitem.setExtendedPrice(extendedPrice);
		  			var quantity = new webref.MeasureType();
		  			quantity.set_value(productLineItem.getQuantityValue());
		  			lineitem.setQuantity(quantity);
		  			
		  			taxItemsArray.push(lineitem);

				}
				// for shipment method to be sent as line item.
				var lineitem = new webref.LineItemQSIType();
				//var product = new webref.Product(shipment.getShippingMethod().getDisplayName());
				var product = new webref.Product(shipment.getShippingMethod().getID());
				product.setProductClass(shipment.getShippingMethod().getTaxClassID());
				lineitem.setProduct(product);
				lineitem.setLineItemId(shipment.getShippingMethod().getID());
				var extendedPrice = new webref.AmountType();
	  			extendedPrice.set_value(shipment.getAdjustedShippingTotalNetPrice().getValue());
	  			lineitem.setExtendedPrice(extendedPrice);
	  			taxItemsArray.push(lineitem);

	 			var customer = new webref.CustomerType();
  				var destination = new webref.LocationType(); 
	  			
				//shipment.getShippingAddress().getID();
		 		var shippingAddress : OrderAddress = shipment.getShippingAddress();
		  		destination.streetAddress1=shippingAddress.getAddress1();
		  		destination.city=shippingAddress.getCity();
		  		destination.mainDivision=shippingAddress.getStateCode();
		  		destination.postalCode=shippingAddress.getPostalCode();
		  		destination.country=shippingAddress.getCountryCode();
		  		customer.setDestination(destination);

	  			//customer data
 
				quotationRequestType.setTransactionType(webref.SaleTransactionType.fromString(VertexQuotationHelper.getTransactionType()));
		  		quotationRequestType.setSeller(sellerType)
		  		quotationRequestType.setCustomer(customer);
		  		quotationRequestType.setLineItem(taxItemsArray);
		  		
		  		var envelope = new webref.VertexEnvelope();
		  		envelope.setLogin(login);
		  		envelope.setQuotationRequest(quotationRequestType);
		  		
		  		// create response object, set it to null
				var taxCalulationResObj = null;
				
				try {
		    		taxCalulationResObj = service.calculateTax60(envelope);
		    		quotationResponseArray.push(taxCalulationResObj.getQuotationResponse());
		  		}catch(e){
		  			// handle exception
		  			Logger.error(e);
		  			return null;
				}
					
			}
		}

		return quotationResponseArray;
	}	

}

function getVertexQuotationHelper()
{
	return VertexQuotationHelper;
}
