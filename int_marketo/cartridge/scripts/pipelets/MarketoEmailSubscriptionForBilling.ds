/**
*	@input email					:	String
*	@input marketoEndpointUrl		:	String
*	@input marketoTokenEndpointUrl	:	String
*	@input marketoClientId			:	String
*	@input marketoClientSecretKey	:	String
*   @input firstname				:	String
*   @input lastname				    :	String
*   @input title				    :	String
*   @input optin		            :	Boolean
*   @input shopPCEmember		    :	Boolean

*/



importPackage(dw.system);
	var sf = require("bc_serviceframework");
	var MarketoEmailSubscriptionSerive = require("../services/MarketoEmailSubscriptionServiceBilling");
 

function execute( pdict : PipelineDictionary ) : Number {
	var unsubscribed:Boolean;
	if(pdict.optin==true)
	{
	   unsubscribed=false;
	}
	else
	{
	   unsubscribed=true;
	}
	Logger.info("Entering MarketoEmailSubs..ds");
	
	//First request we are making to get the tokenId from the marketo
	var MarketoEmailSubscriptionService = sf.getService('MarketoEmailSubscriptionService');
	var service = new MarketoEmailSubscriptionService();
	
	var marketoTokenRequestObj : Object 			= new Object();
	marketoTokenRequestObj.marketoTokenEndpointUrl	= pdict.marketoTokenEndpointUrl;
	marketoTokenRequestObj.marketoClientId			= pdict.marketoClientId;
	marketoTokenRequestObj.marketoClientSecretKey	= pdict.marketoClientSecretKey;
	marketoTokenRequestObj.isTokenRequest			= true;
	
	service.call(marketoTokenRequestObj);
	var tokenResponse  : Object = service.response;				
   	var accessToken = JSON.parse(tokenResponse).access_token;
	//Logger.debug("Marketo access token :"+ accessToken);
	
	if(accessToken ==null){
		Logger.error("Error");
        Logger.debug("Not working");
		return PIPELET_ERROR;
	}
	
	//Second request we are making to subscribe the email.	
	  var marketoRequestObj : Object 			= new Object();
	  marketoRequestObj.email   				= pdict.email.toLowerCase();
	  marketoRequestObj.firstName   			= pdict.firstname;
	  marketoRequestObj.lastName   			    = pdict.lastname;
	  marketoRequestObj.emailable   			= pdict.optin;
	  marketoRequestObj.unsubscribed  			= unsubscribed;
	  marketoRequestObj.accessToken			    = accessToken;
	  marketoRequestObj.marketoEndpointUrl 	    = pdict.marketoEndpointUrl;
	  marketoRequestObj.shopPCECmember 	   		= pdict.shopPCEmember;
	  if(pdict.optin == true){
	  	marketoRequestObj.action   				= "createOrUpdate";
	  }else{
	  	marketoRequestObj.action   				= "updateOnly";
	  }
	  marketoTokenRequestObj.isTokenRequest	    = false;
	  
	  service.call(marketoRequestObj);

	var response  : Object = JSON.parse(service.response);
	
	Logger.info("Marketo Request Object Billing Page : " + marketoRequestObj.jsonRequestObj);
	Logger.info("Marketo Email :"+ marketoRequestObj.email+"  : subscription response response"+ service.response);
	
   	if(response.success) 
   	{
   		Logger.info("Exiting with Success");
   		Logger.debug("Response:"+service.response);
   		return PIPELET_NEXT;
   	} else 
   	{
   		Logger.info("Exiting with Failure");
        Logger.debug("Not working");
   		return PIPELET_ERROR;
   		
   	}
}
