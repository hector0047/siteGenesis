/**
 * This file provides access to the MainStreet Order Service.
 * You can use it by including it 
 *    importScript("int_mainstreet:library/libMainstreet.ds");
 * 
 * It cannot be used in a script node by itself.
 * For a description of the webservices please read the requirements document:
 * Integration-OrderStatusWS.docx
 *
 *
 * @author Demandware
 * @creationdate 2011-07-22
 *
 */
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value);

/**
* Create a new instance of MainStreet Communication class
*/
var MainStreet = function () {
	
	this.MainStreetDomain = Site.getCurrent().getCustomPreferenceValue("MainStreetDomain");
	var xx = this.MainStreetDomain;
	
	if(empty(this.MainStreetDomain)) {
		// removed coding by convention because there is no test account
		this.MainStreetDomain = "";
		Logger.warn("No main street domain set. Please provide it in the back office. Site -> <YOURSITE> -> Site Preferences -> Custom Preferences -> MainStreet -> MainStreet Domain");
	}

	this.MainStreetUsername = Site.getCurrent().getCustomPreferenceValue("MainStreetUsername");
	if(empty(this.MainStreetUsername)) {
		// removed coding by convention because there is no test account
		this.MainStreetUsername = "";
		Logger.warn("No main street Username set. Please provide it in the back office. Site -> <YOURSITE> -> Site Preferences -> Custom Preferences -> MainStreet -> MainStreet Username");
	}

	this.MainStreetPassword = Site.getCurrent().getCustomPreferenceValue("MainStreetPassword");
	if(empty(this.MainStreetPassword)) {
		// removed coding by convention because there is no test account
		this.MainStreetPassword = "";
		Logger.warn("No main street Password set. Please provide it in the back office. Site -> <YOURSITE> -> Site Preferences -> Custom Preferences -> MainStreet -> MainStreet Password");
	}

	this.MainStreetEndpoint = Site.getCurrent().getCustomPreferenceValue("MainStreetEndpoint");
}


MainStreet.prototype = {
	
	mainstreetReference : webreferences.Website_panb2c,	
	
	getService: function() {
		var service : Stub = this.mainstreetReference.getService("Website","BasicHttpBinding_IWebsite");
		if(!empty(this.MainStreetEndpoint)) {
			service._setProperty(Stub.ENDPOINT_ADDRESS_PROPERTY, this.MainStreetEndpoint);
		}
		return service;
	},
	
	getCredentials: function () {
		var credentials = new this.mainstreetReference.Credentials();
		credentials.domain = this.MainStreetDomain;
		credentials.password = this.MainStreetPassword; 
		credentials.username = this.MainStreetUsername;
		return credentials;
	},
	
	/**
	* Gets a list of orders which where created by the customer.
	*/
	GetInventoryLevels: function(productIdsList) {
		// create request body
		var request = new this.mainstreetReference.GetInventoryLevels();
		
		
		request.request = new this.mainstreetReference.GetInventoryLevelsRequest();
		request.request.credentials = this.getCredentials();
		request.request.itemIds = productIdsList;
		var inventoryLevelsResponse = null;
		
		// send request
		try {
		inventoryLevelsResponse = this.getService().getInventoryLevels(request);
		} catch(e) {
			Logger.error(e.name+""+e.message);
			return null;
		}		

		return inventoryLevelsResponse.getInventoryLevelsResult.inventoryLevels;
	},
	/**
	* Gets a list of orders created by a customer.
	*/
	GetOrderByCustomer: function(customerId) {
		// create request body
		var request = new this.mainstreetReference.GetOrders();
		request.request = new this.mainstreetReference.GetOrdersRequest();
		request.request.credentials = this.getCredentials();
		request.request.customerId = customerId;
		//request.request.orderIds = orderIds;		
		
		var ordersResponse = null;	
		// send request
		try {
		ordersResponse = this.getService().getOrders(request);
		} catch(e) {
			var x=e.name+""+e.message;
			Logger.error(e.name+""+e.message);
			return null;
		}		
		Logger.debug(ordersResponse.getOrdersResult.orders.toString());
		return ordersResponse.getOrdersResult;
	},
	
		/**
	* Gets a list of orders.
	*/
	GetOrders: function(orderIds) {
		// create request body
		var request = new this.mainstreetReference.GetOrders();
		request.request = new this.mainstreetReference.GetOrdersRequest();
		request.request.credentials = this.getCredentials();
		request.request.orderIds = orderIds;
		var ordersResponse = null;	
		// send request
		try {
		ordersResponse = this.getService().getOrders(request);
		} catch(e) {
			var x=e.name+""+e.message;
			Logger.error(e.name+""+e.message);
			return null;
		}		
		Logger.debug(ordersResponse.getOrdersResult.orders.toString());
		return ordersResponse.getOrdersResult;
	},
	GetListOrdersByCustomer: function(customerId) {
		// create request body
		var request = new this.mainstreetReference.ListOrders();
		request.request = new this.mainstreetReference.ListOrdersRequest();
		request.request.credentials = this.getCredentials();
		request.request.customerId = customerId;	
		
		var ordersResponse = null;	
		// send request
		try {
		ordersResponse = this.getService().listOrders(request);
		} catch(e) {
			var x=e.name+""+e.message;
			Logger.error(e.name+""+e.message);
			return null;
		}		
		Logger.debug(ordersResponse.listOrdersResult.orders.toString());

		return ordersResponse.listOrdersResult;
	},
	GetListOrdersByOrderId: function(orderIds) {
		// create request body

		var request = new this.mainstreetReference.ListOrders();
		request.request = new this.mainstreetReference.ListOrdersRequest();
		request.request.credentials = this.getCredentials();
		request.request.orderIds = orderIds;		
		var ordersResponse = null;	
		// send request
		try {
						
			
		ordersResponse = this.getService().listOrders(request);
		
		} catch(e) {
			var x=e.name+""+e.message;
			Logger.error("Mainstreet: GetListOrdersByOrderId: "+x);
			return null;
		}		
		Logger.debug(ordersResponse.listOrdersResult.orders.toString());

		return ordersResponse.listOrdersResult;
	},
	
	/**
	* Get detail order
	*/
	GetOrders1111: function(orderNo) {
		// create request body
		var request = new this.mainstreetReference.GetOrderDetail();
		
		request.credentials = this.getCredentials();
		request.request = new this.mainstreetReference.OrderGetDataRequest();
		request.request.orderId = orderNo;
		var orderDetailResponse = null;
		
		// send request
		try {
			orderDetailResponse = this.getService().getOrderDetail(request);
		} catch(e) {
			Logger.error(e.name+""+e.message);
			return null;
		}
		Logger.debug("attributes: "+orderDetailResponse.getOrderDetailResult.data.attributes.toString()+"\n"+
			"primaryData: "+orderDetailResponse.getOrderDetailResult.data.primaryData.toString()+"\n"+
			"providerAttributes: "+orderDetailResponse.getOrderDetailResult.data.providerAttributes.toString()+"\n"+
			"shipmentDetail: "+orderDetailResponse.getOrderDetailResult.data.shipmentDetail.toString()+"\n"
		);
		return orderDetailResponse.getOrderDetailResult.data.primaryData != "<dsOrderDetail />" ? {
			"attributes" : new XML(orderDetailResponse.getOrderDetailResult.data.attributes.toString()),
			"primaryData" : new XML(orderDetailResponse.getOrderDetailResult.data.primaryData.toString()),
			"providerAttributes" : new XML(orderDetailResponse.getOrderDetailResult.data.providerAttributes.toString()),
			"shipmentDetail" : new XML(orderDetailResponse.getOrderDetailResult.data.shipmentDetail.toString())
		} : null;
	},
	
	/**
	* Generate a JavaScript Date Object from an ISO 8601 timestamp
	* e.g. 2010-05-19T17:11:00.17-04:00
	*/
	parseISO8601: function (string) {
		var returnDate : Date = new Date();
		var regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" +
	        "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?" +
	        "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
	        try{
	    var string2  : String = dw.util.StringUtils.formatCalendar(new dw.util.Calendar(new Date(string)), "MMM,dd,yyyy");
	    returnDate = string2;
	    var d = string2.match(new RegExp(regexp));
	        }catch(e)
	        {var x = e.message;
	        }
	 
		return returnDate;
	},
	
	/**
	* Wraps an order from mainstreet in a demandware
	* order object.
	*/
	makeDemandwareSmallOrder: function (order) {
		var returnOrder = {
		   mainStreetOrder : 1,
       	   orderNo : order.id.toString(),
           creationDate : order.date.time,
           status: order.status.toString(),
           totalTax : new Money(order.tax!=null?order.tax:0, Site.getCurrent().getDefaultCurrency()),
           totalGrossPrice : new Money(order.total, Site.getCurrent().getDefaultCurrency()),
           shippingTotalPrice : new Money(order.shipping!=null?order.shipping:0, Site.getCurrent().getDefaultCurrency()),
           giftCertificateTotalPrice : new Money(0, Site.getCurrent().getDefaultCurrency()),
           shipments : new ArrayList(),
           billingAddress : new ArrayList(),
           paymentInstruments: new ArrayList()
       };
       returnOrder.shipments.push({
         gift : false,
         shippingAddress : {
             fullName : order.shipAttention.toString()
         },
         giftCertificateLineItems : new ArrayList(),
         productLineItems : new ArrayList()
         
       });
       return returnOrder;
	},
	

	/**
	* Generate a complete demandware order from a mainstreet response
	*/
	makeDemandwareBigOrder: function (order, response) {
		order.billingAddress = {
			fullName : response.billAttention,
			//companyName : response.billCompanyName,
			postalCode : response.billPostalCode,
			stateCode : response.billRegionCd,
			address1 : response.billAddress,
			city : response.billCity,
			phone : response.billPhone,
			email :	response.billEmail
		};
		if(response.paymentExpiration != null)
			response.paymentExpiration.toString().match(/(\d+)\/(\d+)/);
		var expirationMonth = RegExp.$1;
		var expirationYear = RegExp.$2;
		var paymentAmount = response.paymentAmount;
		if( paymentAmount == null ) 
			paymentAmount = 0;
		order.paymentInstruments = [{
				paymentTransaction : { amount : new Money(paymentAmount, Site.getCurrent().getDefaultCurrency()) },
			creditCardType : "00"+response.paymentMethodId,
			maskedCreditCardNumber : response.paymentNumber,
			creditCardExpirationMonth : expirationMonth,
			creditCardExpirationYear : expirationYear,
			creditCardHolder : response.paymentName

			}
		];
		order.getPaymentInstruments = function (s) {
			if(s == dw.order.PaymentInstrument.METHOD_CREDIT_CARD) {
				return this.paymentInstruments;
			} else {
				return [];
			}
		};
		var subtotal : String = response.subtotal;
		var discount : String = response.discount;
		var currencyCode : String = Site.getCurrent().getDefaultCurrency();
		if (response.discount != null) {
			order.adjustedMerchandizeTotalPriceTrue = new Money(parseFloat(response.subtotal)+parseFloat(response.discount), Site.getCurrent().getDefaultCurrency());
		} else {
			order.adjustedMerchandizeTotalPriceTrue = new Money(parseFloat(response.subtotal), Site.getCurrent().getDefaultCurrency());
		}
		order.adjustedMerchandizeTotalPriceFalse = new Money(response.subtotal, Site.getCurrent().getDefaultCurrency());
		order.getAdjustedMerchandizeTotalPrice = function (b) {
			if(!b) {
				return this.adjustedMerchandizeTotalPriceFalse;
			} else {
				return this.adjustedMerchandizeTotalPriceTrue;
			}
		};
		order.getAdjustedShippingTotalPrice = function () {
			return this.shippingTotalPrice;
		};

		var shippingFirstName = "";
		var shippingLastName = "";
		var splitShippingName = response.shipAttention;
		if(splitShippingName.length == 2) {
			shippingFirstName = splitShippingName[0];
			shippingLastName = splitShippingName[1];
		} else {
			shippingLastName = response.shipAttention;
		}
		order.shipments[0].shippingAddress = {
			fullName : response.shipAttention,
			firstName : shippingFirstName,
			lastName : shippingLastName,
			companyName : response.shipCompanyName,
			postalCode : response.shipPostalCode,
			stateCode : response.shipRegionCd,
			address1 : response.shipAddress,
			city : response.shipCity,
			phone : response.shipPhone
		};
		order.shipments[0].productLineItems = new ArrayList();
		var mainstreet = new MainStreet();
		var prodIds : Array = new Array();
		prodIds.push(order.orderNo.toString());
		var mainStreetOrderResponse = mainstreet.GetOrders(prodIds);
		if(mainStreetOrderResponse != null){
			for each (var order1  in mainStreetOrderResponse.orders) {
				
				for each (var shiptos  in order1.shipTos) {
					
					for each (var shippinggroups  in shiptos.shippingGroups) {
	
				for each (var product  in shippinggroups.orderItems) {
		
				var lineItem = {
					productName : product.description,
					productID : product.cd,
					quantity : product.quantity,
					quantityOrdered : product.quantityOrdered,
					quantityAllocated : product.quantityAllocated,
					quantityFulfilled : product.quantityFulfilled,
					optionProductLineItems : new ArrayList(),
					adjustedPrice : new Money(product.extendedPrice, Site.getCurrent().getDefaultCurrency()),
					product : {
						productSet : false,
						master : false,
						priceModel : {
							price : new Money(product.extendedPrice, Site.getCurrent().getDefaultCurrency()),
							getPrice: function () {
								return this.price;
							},
							getPriceBookPrice: function (s) {
								return this.price;
							}
						},
						getPriceModel: function () {
							return this.priceModel;
						},
						getPriceTable: function () {
							return [];
						},
						isVariant: function () {
							return false;
						}
					},
					priceAdjustments : new ArrayList()
				};
				if(product.discount > 0) {
					lineItem.priceAdjustments.push({
						lineItemText : "You get "+new Money(product.discount, Site.getCurrent().getDefaultCurrency())+" discount."
					});
				}
				for each (var productShipment  in product.shipments) {
					order.trackNo = productShipment.track;
				}
				order.shipments[0].productLineItems.push(lineItem);
			}
			order.shipments[0].shippingMethod = {
				displayName : shippinggroups.shippingMethod.label
			};
			}
			}
		}
	}
		return order;
	},
	
	/**
	*  created new method 'makeDemandwarePanasonicOrder' to support multiple shipments for Panasonic 
	*/

		makeDemandwarePanasonicOrder: function (response) {
						
			var paymentMethodNames : ArrayList = new ArrayList("Unknown","Visa","MasterCard","AmericanExpress","Discover","Cash","Check","Money Order","PayPal","Purchase Order","Warranty","WireTransfer (ACH)","Diners Club","JCB Card","Bank Card","Gift Card","EFT","Electron","Solo","Switch","Maestro","MaestroInt","Visa Electron","Amazon","Custom1","Custom2","Custom3","CustomCharge1","CustomCharge2","CustomCharge3");
			
			var order = {
			   mainStreetOrder : 1,
	       	   orderNo : response.id.toString(),
	           creationDate : response.date.time,
	           status: response.status.toString(),
	           totalTax : new Money(response.tax!=null?response.tax:0, Site.getCurrent().getDefaultCurrency()),
	           totalGrossPrice : new Money(response.total!=null?response.total:0, Site.getCurrent().getDefaultCurrency()),
	           shippingTotalPrice : new Money(response.shipping!=null?response.shipping:0, Site.getCurrent().getDefaultCurrency()),
	           discount : new Money(response.discount!=null?response.discount:0, Site.getCurrent().getDefaultCurrency()),
	           recycleAmount : new Money(0, Site.getCurrent().getDefaultCurrency()),
	           giftCertificateTotalPrice : new Money(0, Site.getCurrent().getDefaultCurrency()),
	           shipments : new ArrayList(),
	           billingAddress : new ArrayList(),
	           paymentInstruments: new ArrayList(),
	           shipments : new ArrayList()
	         };
			
			if(response.fulfilled != null && response.fulfilled){
				order.fulfilledDate = response.fulfilledDate.time;
			}else{
				order.fulfilledDate = null;
			}
			
			order.billingAddress = {
				fullName : response.billTo.address.attention,
				companyName : response.billTo.address.companyName,
				postalCode : response.billTo.address.postalCode,
				stateCode : '',
				address1 : response.billTo.address.address1,
				address2 : response.billTo.address.address2,
				city : response.billTo.address.city,
				phone : response.billTo.phone,
				email :	response.billTo.email
			};
			
			
			if(response.billTo.address.countryRegion != null)
			{
				order.billingAddress.stateCode = response.billTo.address.countryRegion.cd;
			}
			else if(response.billTo.address.countryRegion !=null)
			{
				order.billingAddress.stateCode = response.billTo.address.countryRegion.label;
			}
			
			var subtotal : String = response.subtotal;
			var discount : String = response.discount;
			var currencyCode : String = Site.getCurrent().getDefaultCurrency();
			if (response.discount != null) {
				order.adjustedMerchandizeTotalPriceTrue = new Money(parseFloat(response.subtotal)+parseFloat(response.discount), Site.getCurrent().getDefaultCurrency());
			} else {
				order.adjustedMerchandizeTotalPriceTrue = new Money(parseFloat(response.subtotal), Site.getCurrent().getDefaultCurrency());
			}
			order.adjustedMerchandizeTotalPriceFalse = new Money(response.subtotal, Site.getCurrent().getDefaultCurrency());
			order.getAdjustedMerchandizeTotalPrice = function (b) {
				if(!b) {
					return this.adjustedMerchandizeTotalPriceFalse;
				} else {
					return this.adjustedMerchandizeTotalPriceTrue;
				}
			};
			order.getAdjustedShippingTotalPrice = function () {
				return this.shippingTotalPrice;
			};
						
			for each (var shiptos  in response.shipTos) {
				
				 var shippingAddress;
				 var shipmentsdetail = { 
				     	productLineItems : new ArrayList(),
				     	shippingMethod : {
				     		displayName : ''
				     	},
				     	shippingStatus : '',
				     	ShippingDate : '',
				     	shippingAddress : {
				     		fullName : shiptos.address.attention,
					     	companyName : shiptos.address.companyName,
							postalCode : shiptos.address.postalCode,
							stateCode : shiptos.address.countryRegion.cd,
							address1 : shiptos.address.address1,
							address2 : shiptos.address.address2,
							city : shiptos.address.city,
							phone : shiptos.phone,
							email :	shiptos.email
				     	}
				}
				
				for each (var shippinggroups  in shiptos.shippingGroups) {

				    if( shippinggroups.shippingMethod.value !=null )
				    {
				    	shipmentsdetail.shippingMethod.displayName = shippinggroups.shippingMethod.label;
				    }
					for each (var product  in shippinggroups.orderItems) {
							var lineItem = {
								productName : product.description,
								productID : product.cd,
								quantity : product.quantity,
								quantityOrdered : product.quantityOrdered,
								quantityAllocated : product.quantityAllocated,
								quantityFulfilled : product.quantityFulfilled,
								quantityCredited : product.quantityCredited,
								optionProductLineItems : new ArrayList(),
								adjustedPrice : new Money(product.extendedPrice, Site.getCurrent().getDefaultCurrency()),								
								product : {
									productServiceLevel : '',
									productLine : '',
									productSet : false,
									master : false,									
									priceModel : {
										price : new Money(product.unitPrice, Site.getCurrent().getDefaultCurrency()),
										getPrice: function () {
											return this.price;
										},
										getPriceBookPrice: function (s) {
											return this.price;
										}
									},									
									getPriceModel: function () {
										return this.priceModel;
									},
									getPriceTable: function () {
										return [];
									},
									isVariant: function () {
										return false;
									}
								},
								
								priceAdjustments : new ArrayList()
							};						
						shipmentsdetail.productLineItems.push(lineItem);
					}				
				}
				order.shipments.push(shipmentsdetail);
			}
			
			for each (var payment  in response.payments) {				
				var paymentDetails = {
					paymentMethodName : '',
					cardNumber : '',
					expMonth : '',
					expYear : '',
					amount : '',
					paypalPayerEmail:'',
					cardHolderName:''
				}
				if(payment.methodDescription != null){
					paymentDetails.paymentMethodName = payment.methodDescription;
				}
				if(payment.cardNumberMasked != null){
					paymentDetails.cardNumber = payment.cardNumberMasked;
				}
				if(payment.cardExpMonth != null){
					paymentDetails.expMonth = payment.cardExpMonth;
				}
				if(payment.cardExpYear != null){
					paymentDetails.expYear = payment.cardExpYear;
				}
				if(payment.amount != null){
					paymentDetails.amount = new Money(payment.amount!=null?payment.amount:0, Site.getCurrent().getDefaultCurrency());
				}
				if(payment.cardHolderName != null){
					paymentDetails.paypalPayerEmail = response.billTo.email;
				}
				if(payment.cardHolderName != null){
					paymentDetails.cardHolderName = payment.cardHolderName;
				}
			order.paymentInstruments.push(paymentDetails);
		}
		return order;			
	}
}

// MainstreetHelper method to export the helper
function getMainstreetHelper()
{
	return new MainStreet();
}
