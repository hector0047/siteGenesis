/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*

*<?xml version="1.0" encoding="UTF-8"?>
*<catalog xmlns="http://www.demandware.com/xml/impex/catalog/2006-10-31" catalog-id="shop-pna-master-catalog">
*	<product product-id="047-40009">
*		<ean/>
*		<upc/>
*		<unit/>
*		<min-order-quantity>1</min-order-quantity>
*		<step-quantity>1</step-quantity>
*		<display-name xml:lang="x-default">047-40009</display-name>
*		<short-description xml:lang="x-default">047-40009</short-description>
*		<online-flag>true</online-flag>
*		<available-flag>true</available-flag>
*		<searchable-flag>true</searchable-flag>
*		<page-attributes/>
*		<custom-attributes>
*			<custom-attribute attribute-id="UMN">047-40009</custom-attribute>
*			<custom-attribute attribute-id="dimWeight">0.000</custom-attribute>
*			<custom-attribute attribute-id="disable_dynamic_price">true</custom-attribute>
*			<custom-attribute attribute-id="faqs"></custom-attribute>
*			<custom-attribute attribute-id="productLegacyURL">shop.panasonic.com/shop/model/047-40009</custom-attribute>
*			<custom-attribute attribute-id="supportOnly">false</custom-attribute>
*		</custom-attributes>
*	</product>
*</catalog>
* For example:
* 
*	@input CurrentWorkflowComponentInstance : Object The current workflow component instance
*   @output csvreportpath : String URL from which to pull content
*   @output filenm : String URL from which to pull content
*   @output dateTime : String
*   @output mailSub : String
*
*
*/ 
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.object );
importPackage( dw.io );
importPackage( dw.campaign );

function execute( pdict : PipelineDictionary ) : Number
{	
	try {
		
		var cat : Catalog = dw.catalog.CatalogMgr.siteCatalog;
		var productList : SeekableIterator = dw.catalog.ProductMgr.queryProductsInCatalogSorted(cat); 
		
		var PriceBookMgr : PriceBookMgr = dw.catalog.PriceBookMgr;
		//var priceBook : PriceBook = PriceBookMgr.getPriceBook(priceBookId);
		var CurrentWorkflowComponentInstance : Object = pdict.CurrentWorkflowComponentInstance;
		var file_path : Boolean = CurrentWorkflowComponentInstance.getParameterValue('filepath');
		
		var path : String = File.IMPEX + File.SEPARATOR + file_path + File.SEPARATOR;
		var file1 : File = new File(path);
		if (!file1.exists()) {
			file1.mkdirs();
		}
		
		var calendar : Calendar = new Calendar();
		calendar.timeZone = "US/Eastern";
		var dateString : String = dw.util.StringUtils.formatCalendar(calendar, "_MM/dd/yyyy_h:mm:sa").toUpperCase();
		var flnm : String = dateString.replace("_", " ").replace("_", " ");
		dateString = dateString.replace("/", "").replace("/", "").replace(":", "").replace(":", "");
		var path : String = File.IMPEX + File.SEPARATOR + file_path + File.SEPARATOR + "promotions.xml";
		
		var csvpath : String = File.IMPEX + File.SEPARATOR + file_path + File.SEPARATOR + "ThresholdCheckReport" + dateString + ".csv";
		var filenm : String = "ThresholdCheckReport" + dateString + ".csv";
		pdict.csvreportpath = csvpath;
		pdict.filenm = filenm;
		
		var dateTime : String = dw.util.StringUtils.formatCalendar(new Calendar(), "MM/dd/yyyy h:mm a").toUpperCase();
		
		pdict.dateTime = flnm;
		var mailSubPref : String = dw.system.Site.getCurrent().getCustomPreferenceValue('thresholdMailSub');
		pdict.mailSub = dw.util.StringUtils.format(mailSubPref, flnm);
		
		var csvfile : File = new File(csvpath);
		var csvfileWriter : FileWriter = new FileWriter(csvfile);
		var csw : CSVStreamWriter = new CSVStreamWriter(csvfileWriter, ",");
		var csvheadEmpty : Array = new Array("", "", "", "", "", "", "", "");
		csw.writeNext(csvheadEmpty);
		var csvheadArray : Array = new Array("Promotion ID", "Product ID", "MSRP Price", "MAP Price", "Sale Price", "Thresold Price", "Promotional Price", "Threshold Price Breaking?");
		//var csvhead : String = "Sr, ProductID, Sale price, Threshold price, MSRP price, Lowest retailer’s price, Retailer’s name, Final sale price, Updated from";
		csw.writeNext(csvheadArray);
		
		var count : Number = 1;
		var disablePromo : Array = new Array();
		
		var file : File = new File(file1.getFullPath() + "promotions.xml")
		var fileWriter : FileWriter = new FileWriter(file, "UTF-8");
		var xsw : XMLStreamWriter = new XMLStreamWriter(fileWriter);
		xsw.writeStartDocument("UTF-8", "1.0");
		xsw.writeStartElement("promotions");
		xsw.writeDefaultNamespace("http://www.demandware.com/xml/impex/promotion/2008-01-31");
		
		while (productList.hasNext()) {
			
			var product : Product = productList.next();
			if (!product.master && !product.custom.supportOnly && !product.custom.isWarranty && !product.custom.isAccessory && !product.custom.isRefurbished)
			{
				var productID : String = product.ID;
				
				//if (productID == "015-40008") {
					
					//var promotionID : String = dw.campaign.PromotionMgr.getPromotion(product).ID;
					
					var priceModel : ProductPriceModel = product.getPriceModel();
					
					var salePrice : String = priceModel.getPriceBookPrice('shop-pna-sale-price');
					var mapPrice : String = priceModel.getPriceBookPrice('shop-pna-map-price');
					var listPrice : String = priceModel.getPriceBookPrice('shop-pna-list-price');
					var thresoldPrice : String = priceModel.getPriceBookPrice('shop-pna-thresold-price');
					
					/* Promotion calculation code */
					
					var promotions : ArrayList = new ArrayList(dw.campaign.PromotionMgr.getActivePromotions().getProductPromotions( product ));
					//var minPromotionalPrice : Money = promotions.size() > 0 ? promotions[0].getPromotionalPrice(product): dw.value.Money.NOT_AVAILABLE;
					
					for each( var promotion in promotions ){
						//if (!promotion.basedOnSourceCodes)
						if ( promotion.promotionClass == "PRODUCT")
						{
							var flg : Boolean = false;
							try {
								if (promotion.getPromotionalPrice(product) != "N/A" && !promotion.custom.excludeThresholdCheck) {
								
									var promotionalPrice : String = promotion.getPromotionalPrice(product);
									
									if(promotionalPrice.value != "N/A" && promotionalPrice.value < thresoldPrice.value ) {
										
										flg = true;
										csvStr = new Array( promotion.ID, productID, listPrice.value, mapPrice.value, salePrice.value, thresoldPrice.value, promotionalPrice.value, flg);
										csw.writeNext(csvStr);
								   		count++;
								   		if ( disablePromo.indexOf(promotion.ID) == -1 )
											disablePromo.push(promotion.ID);
								   		
										//<Promo Id>, <Product ID>, DISABLED
									}
								}
							}
							catch(e) {
								Logger.error("[thresholdcheck.ds] Error in file ( {0}, Product ID:{1} >> Promotion ID:{2} )",e.message,productID?productID:"",promotion?promotion.ID:"");
							}
						}
					}
					
				//}
				
				/* End Promotion calculation code */
			}
		}
		
		for each( var promo : String in disablePromo ) {
			xsw.writeStartElement("promotion");
			xsw.writeAttribute("promotion-id", promo);
			xsw.writeStartElement("enabled-flag");
				xsw.writeCharacters("false");
			xsw.writeEndElement();
			xsw.writeEndElement();
		}
		
		xsw.writeEndElement();
		xsw.flush();
		xsw.close();
		fileWriter.close();
		csw.close();
		csvfileWriter.close();
	}
	
	
	catch(ex) {
		Logger.error("[thresholdcheck.ds] Error in file ( {0} )",ex.message );
		return PIPELET_ERROR;
	}

   return PIPELET_NEXT;
		
}
