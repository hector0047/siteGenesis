/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*	@input CurrentWorkflowComponentInstance : Object The current workflow component instance
*
*/
 
 importPackage( dw.system );
 importPackage( dw.util );
 importPackage( dw.web );
 importPackage( dw.net );
 importPackage( dw.catalog );
 importPackage( dw.object );
 importPackage( dw.io );
 importPackage( dw.content );
 
 importScript( "lib/libPiersFeed.ds" );

function execute( pdict : PipelineDictionary ) : Number
{	
	Logger.debug("Piers Feed Job : Starting temp XML file creation.");
	
	var CurrentWorkflowComponentInstance : Object = pdict.CurrentWorkflowComponentInstance;
	
	var PiersFeedHelper : Object = getPiersFeedHelper();	
	
	var PFfilePath : String = CurrentWorkflowComponentInstance.getParameterValue('filePath');
	//var tempXMLPiersFeedFilePath : String = File.IMPEX +'/src/piers/temp/tempXMLPiersFeedFilePath.xml';
	var tempXMLPiersFeedFilePath : String = File.IMPEX + File.SEPARATOR + PFfilePath + File.SEPARATOR + 'temp/tempXMLPiersFeedFilePath.xml';	
	var tempXMLPiersFeedFile : File  = new File(tempXMLPiersFeedFilePath);
	var tempXMLPiersFeedFileWriter : FileWriter = new FileWriter(tempXMLPiersFeedFile, "UTF-8"); 	
 	var tempXMLPiersFeedXMLStreamWriter : XMLStreamWriter = new XMLStreamWriter(tempXMLPiersFeedFileWriter);
					tempXMLPiersFeedXMLStreamWriter.writeRaw('<?xml version="1.0" encoding="UTF-8"?>')
					tempXMLPiersFeedXMLStreamWriter.writeStartElement("technicalspecifications");
					
	// Code block for Piers feed file and path parameters
	// piersFilesPath read this parameter from CurrentWorkflowComponentInstance
	//var piersFilesPath = File.IMPEX + '/src/piers';	
	var piersFilesPath = File.IMPEX + File.SEPARATOR + PFfilePath;
	var piersFilesDirectory : dw.io.File = new File(piersFilesPath);	
	var piersFilePattern : String = CurrentWorkflowComponentInstance.getParameterValue('piersFilePattern');
	var regExp : RegExp = new RegExp(piersFilePattern);
	var piersFiles : dw.util.List = piersFilesDirectory.listFiles(function(file : File) {
		if (file.isDirectory()) {
			return false;
		}
		if (!empty(piersFilePattern)) {
			return regExp.test(file.name)
		}
		return true;
	});	
	
	
	
    
	
	
	
	var piersFilesCounter : Number = 0;	
	var piersFilesNames : Array = new Array();
	var piersFile : Object; 	
	
	
	try {
		while(piersFilesCounter < piersFiles.size()) {
			
			piersFile = piersFiles.get(piersFilesCounter);
			
			piersFilesNames[piersFilesCounter] = piersFile.name;
			
			if(piersFile.file) {		
				Logger.debug("Piers Feed Job :  Started parsing file for temp xml generation:" + piersFilesNames[piersFilesCounter]);				
				PiersFeedHelper.parsePiersFeed(piersFile);
				PiersFeedHelper.parseItemContentObjectsAndWrite(PiersFeedHelper.ItemContentObjects, tempXMLPiersFeedXMLStreamWriter);			
				Logger.debug("Piers Feed Job :  Completed parsing file for temp xml generation:" + piersFilesNames[piersFilesCounter]);
			}
			piersFilesCounter = piersFilesCounter + 1;
		}
		
	} catch(ex) {
		Logger.error("[CreatePiersFeedTempXML.ds] - Error : ( {0} )",ex.message);
		return PIPELET_ERROR;
	} 
	
	tempXMLPiersFeedXMLStreamWriter.writeEndElement();
	tempXMLPiersFeedXMLStreamWriter.close();
	tempXMLPiersFeedFileWriter.close();
	Logger.debug("Piers Feed Job :  Completed teml xml file cretion.");
	return PIPELET_NEXT;	
}
