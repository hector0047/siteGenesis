/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*	@input CurrentWorkflowComponentInstance : Object The current workflow component instance
*   @input successfullUMNs : Array
*   @output notificationFileName : String
*   @output mailSub : String
*
*/
 
 importPackage( dw.system );
 importPackage( dw.util );
 importPackage( dw.web );
 importPackage( dw.net );
 importPackage( dw.catalog );
 importPackage( dw.object );
 importPackage( dw.io );
 importPackage( dw.content );
 
 importScript( "lib/libPiersFeed.ds" );

function execute( pdict : PipelineDictionary ) : Number
{	
	var PiersFeedHelper : Object = getPiersFeedHelper();	
	var CurrentWorkflowComponentInstance : Object = pdict.CurrentWorkflowComponentInstance;
	var successfullUMNs : Array = new Array();
	successfullUMNs = pdict.successfullUMNs;
	
	var unSuccessfullUMNs : Array = new Array();
	
	var PFfilePath : String = CurrentWorkflowComponentInstance.getParameterValue('filePath');
	
	//var tempXMLPiersFeedFilePath : String = File.IMPEX +'/src/piers/temp/tempXMLPiersFeedFilePath.xml';
	var tempXMLPiersFeedFilePath : String = File.IMPEX + File.SEPARATOR + PFfilePath + File.SEPARATOR + 'temp/tempXMLPiersFeedFilePath.xml';	
	var tempXMLPiersFeedFile : File  = new File(tempXMLPiersFeedFilePath);
	PiersFeedHelper.parsePiersFeedTempXML(tempXMLPiersFeedFile);
	var technicalspecificationContent : XMLList;	
	var technicalspecificationString : String;
	var counter: Number = 0;
	
	
	//var notificationFilePath : String = File.IMPEX +'/src/piers/notification';
	var notificationFilePath : String = File.IMPEX + File.SEPARATOR + PFfilePath + File.SEPARATOR + 'notification';	
	// catalogFileName read from CurrentWorkflowComponentInstance 
	var calendar : Calendar = new Calendar();	
	calendar.timeZone = "GMT";		
	var dateString : String = dw.util.StringUtils.formatCalendar(calendar, "yyyyMMddhmm");	
	var notificationFilePathFileName : String = "notification" + dateString + ".txt";	
	var notificationFile : File  = new File(notificationFilePath + File.SEPARATOR + notificationFilePathFileName);	
	var notificationFileWriter : FileWriter = new FileWriter(notificationFile, "UTF-8");
	
	var mailSubPref : String = dw.system.Site.getCurrent().getCustomPreferenceValue('piersMailSub');
	
			
	try {
			technicalspecificationContent = PiersFeedHelper.technicalspecificationContentsList;
			for each ( var technicalspecificationObject : XML in technicalspecificationContent) {
				
				technicalspecificationString = technicalspecificationObject.@["UMN"];
				
				if(successfullUMNs.indexOf(technicalspecificationString.toString()) == -1) {
					notificationFileWriter.writeLine("\n--------------------------" + technicalspecificationString.toString()  + "------------------------------\n");
					notificationFileWriter.writeLine(technicalspecificationObject.technicalspecification.(@attribute == "value"));
					notificationFileWriter.writeLine("\n--------------------------------------------------------\n");
					counter = counter + 1;
				}
			}				
		}		
	catch(ex) {
		Logger.error("[PiersFeedReader.ds] - Piers Feed Job ended with error : ( {0} )",ex.message);
		return PIPELET_ERROR;
	} 
	
	tempXMLPiersFeedFile.remove();
	notificationFileWriter.close();
	pdict.notificationFileName = notificationFilePathFileName;
	pdict.mailSub = dw.util.StringUtils.format(mailSubPref, dateString);
	Logger.debug("Ending Piers Feed Job.");
	return PIPELET_NEXT;	
}
