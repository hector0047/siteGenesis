importPackage(dw.rpc);
importPackage(dw.order);
importPackage(dw.util);
importPackage(dw.system);
importPackage(dw.ws);

importScript("int_servicebench:sb/Credentials.ds");


var sf = require("bc_serviceframework");
var GetSbRRStatusObj = require("../objects/GetSbRRStatus");
var HashMap = require("dw/util/HashMap");
var WSUtil = require("dw/ws/WSUtil");

 
function getGetSbRRStatusService() {
	return GetSbRRStatusService;
}


var GetSbRRStatusService = sf.getService('AbstractSoapService').extend(

{
	
	init: function() {
		this._super("ServiceBenchRR" , new GetSbRRStatusObj());
	},
	
	
	/**
	 * Initialises the webservice object parsed from the given WSDL File
	 */
	initServiceClient: function() {
		
		this.webReference = webreferences2.CRMServiceOrderServiceProduction;
		
		if ( dw.system.System.getInstanceType() != dw.system.System.PRODUCTION_SYSTEM && !Site.current.preferences.custom.EnableServiceBenchProductionInstance) {
			this.webReference = webreferences2.CRMServiceOrderServiceTest;
		}
		this.serviceClient = this.webReference.getService("CRMServiceOrderService", "CRMServiceOrderPort");
	},

	createRequest: function (sbRRObj) {
		
		
		var secretsMap = new HashMap();
		secretsMap.put(dw.system.Site.getCurrent().getCustomPreferenceValue("SB_userName"), dw.system.Site.getCurrent().getCustomPreferenceValue("SB_password"));
		
		var requestCfg = new HashMap();
		
		// define the ws actions to be performed - in this case add a username token
		requestCfg.put(WSUtil.WS_ACTION, WSUtil.WS_USERNAME_TOKEN);
		requestCfg.put(WSUtil.WS_USER, dw.system.Site.getCurrent().getCustomPreferenceValue("SB_userName"));
		requestCfg.put(WSUtil.WS_PASSWORD_TYPE, WSUtil.WS_PW_TEXT );
		
		// set the secrets for the request
		requestCfg.put(WSUtil.WS_SECRETS_MAP, secretsMap);
		
		// set the response actions - note: you must explicitly state there is no security action 
		//   on the response if there is a security action on the request!
		var responseCfg = new HashMap();
		responseCfg.put(WSUtil.WS_ACTION, WSUtil.WS_NO_SECURITY);
		
		// set the security configurations on the port
		WSUtil.setWSSecurityConfig(this.serviceClient, requestCfg, responseCfg);
		
		var crmNumber			: String		= sbRRObj.crmNumber;
		
		
        var serviceJobStatusRequest = this.webReference.ServiceJobStatusRequest();
		serviceJobStatusRequest.setVersion("2.0");
        serviceJobStatusRequest.setSourceSystemVersion(dw.system.Site.getCurrent().getCustomPreferenceValue("SB_sourceSystemVersion"));
        serviceJobStatusRequest.setSourceSystemName(dw.system.Site.getCurrent().getCustomPreferenceValue("SB_sourceSystemName"));
        var statusRequest = this.webReference.StatusRequest();
        statusRequest.setCrmNumber(crmNumber);
        serviceJobStatusRequest.setStatusRequest(statusRequest);
       // return port.serviceJobStatus(serviceJobStatusRequest);
       
       return serviceJobStatusRequest;
		
		
	
	},
	
	initStatusFromResponse: function () {
		this.status.code = "OK";
	},
		
	/** 
	 * Call the service and return the response.
	 * 
	 */ 
	executeServiceCall: function() {	
		var response = this.serviceClient.serviceJobStatus( this.request );
		 return response;
	},
	
	getDummyResponse: function() {
		return this.object.dummy();
	}
});

sf.registerService('ServiceBenchRR',GetSbRRStatusService);