/**
* Locates the payment instrument using the specified 
* payment method value and puts the PaymentInstrument into the 
* dictionary under the key TargetPaymentInstrument.
*
* @input PaymentInstrument : dw.order.PaymentInstrument The payment instrument to use.
* @input Basket : Object The basket (cart) to look up a payment instrument if PaymentInstrument not passed in.
* @input MethodType : String The PaymentInstrument method type. 
* @input PaymentProcessor : Object The payment processor.
* @output TargetPaymentInstrument : dw.order.PaymentInstrument
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
	// fetch the basket and method type.
 	var basket : Basket = pdict.Basket; 
 	var paymentProcessor : PaymentProcessor = pdict.PaymentProcessor;
    var methodType : String = pdict.MethodType;

	if (basket == null || methodType == null) {
		return PIPELET_ERROR;
	} 	
	
 	var paymentInstrument : OrderPaymentInstrument = pdict.PaymentInstrument;
 	
    if (empty(paymentInstrument)) { 
	 	// If payment Instrument not passed in as argument, iterate over the 
	 	// payment instruments and locate the target payment based on the method.
	    var paymentInstruments : Collection = basket.getPaymentInstruments();
	    for (var i = 0; i < paymentInstruments.size(); i++)
	    {
	    	paymentInstrument = paymentInstruments[i];
	    	if (paymentInstrument.getPaymentMethod() == methodType) { 
	    		break;
	    	} else {
	    		paymentInstrument = null;
	    	}
	    }
    }
    
 	if (paymentInstrument != null ) {
 		if (paymentProcessor != null) {
	 		paymentInstrument.getPaymentTransaction().setPaymentProcessor(paymentProcessor);
	 	}
	 	pdict.TargetPaymentInstrument = paymentInstrument;
	}
	
    return PIPELET_NEXT;
}
