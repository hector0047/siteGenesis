/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
*    @input PaymentInstrument : dw.order.PaymentInstrument If specified, read all card data except CVN/CVV from this payment instrument
*    @input CreditCardForm : dw.web.FormElement If no PaymentInstrument specified and not reading from basket, read card data from this credit card form
*    @input ReadFromBasket : Boolean  Flag indicating whether to read card data from Basket if no PaymentInstrument is filled
*    @input Basket : dw.order.Basket  If no PaymentInstrument specified and ReadFromBasket is true, read card data from first credit card in Basket. If PaymentInstrument specified, read shipment numbers from Basket in case of multi-ship orders
*    @input CvNumber : String         This field needs to be filled with a CVN/CVV unless reading from the credit card form
*
*    @output CybersourceCard : Object
*/
importPackage( dw.system );
importPackage( dw.order);
importClass( dw.util.List );
importClass( dw.order.PaymentInstrument );

importScript('int_cybersource:cybersource/Cybersource_Card_Object.ds');

function execute( pdict : PipelineDictionary ) : Number
{
	var paymentInst : OrderPaymentInstrument = pdict.PaymentInstrument;
	var basket : Basket = pdict.Basket;
	var cardObject : Card_Object = new Card_Object();
	var cardType : String = "";
	
	// if no payment instrument provided, find a card in the basket if ReadFromBasket is specified
	if ( empty(paymentInst) && pdict.ReadFromBasket )
	{
		var l : List = basket.getPaymentInstruments( dw.order.PaymentInstrument.METHOD_CREDIT_CARD );
		if( !empty(basket) && !empty(l) && l.length>0 ) {
			if ( l.length != 1 )
			{
				throw "Expected exactly one credit card.  Found " + l.length + " cards!?";
			}
			paymentInst = l[0];
			
		}
	}

	// If we've got a payment instrument, use it to populate the card object
	if (!empty(paymentInst) && ( paymentInst.getPaymentMethod() == dw.order.PaymentInstrument.METHOD_CREDIT_CARD) ) {
		cardObject.setAccountNumber  ( paymentInst.getCreditCardNumber() );
		if ('paySubscriptionID' in paymentInst.custom) cardObject.setPaySubscriptionID(paymentInst.custom.paySubscriptionID);
		cardObject.setFullName       ( paymentInst.getCreditCardHolder() );
		cardObject.setExpirationMonth( paymentInst.getCreditCardExpirationMonth() );
		cardObject.setExpirationYear ( paymentInst.getCreditCardExpirationYear() );
		cardObject.setCvNumber       ( pdict.CvNumber );
		
		if ('shipment' in paymentInst.custom && !empty(paymentInst.custom.shipment) && basket.shipments.length > 1) {
			cardObject.setShipmentNo( paymentInst.custom.shipment );
		}
		
		cardType = paymentInst.getCreditCardType();
	}
	// otherwise use the credit card data from the last card entered in the creditcard form
	else
	{
		var creditCardForm : dw.web.FormElement = pdict.CreditCardForm;

		cardType = creditCardForm.type.value;
			cardObject.setAccountNumber  ( creditCardForm.number.value );
			cardObject.setFullName       ( creditCardForm.owner.value );
			cardObject.setExpirationMonth( creditCardForm.month.value );
			cardObject.setExpirationYear ( creditCardForm.year.value );
			cardObject.setCvNumber       ( creditCardForm.cvn.value );
	}
	
	switch( cardType )
	{
		case "Visa": 
			cardType="001";
			break;
		case "Master": 
		case "MasterCard":
			cardType="002";
			break;
		case "Amex": 
			cardType="003";
			break;
		case "Discover": 
			cardType="004";
			break;
		// Diners Club
		// JCB
		// Maestro (UK Domestic) and Solo 
	}

	cardObject.setCardType(cardType);
	pdict.CybersourceCard = cardObject;
	
    return PIPELET_NEXT;
}
