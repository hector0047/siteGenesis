/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-  @output File : String
* 
*  
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.customer );
importPackage( dw.io );
importPackage( dw.net );
importPackage( dw.object );
importPackage( dw.campaign );
importPackage( dw.web );
importPackage( dw.crypto );

function execute( args : PipelineDictionary ) : Number
{
	var ProductRecommendationsWriter : FileWriter = null;
	var itemsNo : Number = 0;	
	try{
		var ProductRecommendations : dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "src" + dw.io.File.SEPARATOR +'productrecommendations.csv');
			if( !ProductRecommendations.exists() ){
				ProductRecommendations.createNewFile();
			}
			
			ProductRecommendationsWriter= new FileWriter(ProductRecommendations);
		
	
		var productList : SeekableIterator = ProductMgr.queryAllSiteProducts();
		while(productList.hasNext()) {
			var product : Product = productList.next();
			exportProductRecommendations(product,ProductRecommendationsWriter);
			itemsNo++;
		}
	}
	finally{
	if(ProductRecommendationsWriter != null){
		ProductRecommendationsWriter.close();
		}
	}
	return PIPELET_NEXT;
}	

function exportProductRecommendations(product : Product, sWriter : FileWriter){

	if(product.recommendations.size() > 0){
		try{	
			
			var strArray : ArrayList = new ArrayList();
			for each(var prod : Object in product.recommendations){
				strArray.add(prod.recommendedItem.ID);
			}
			var currArr : String =[];
			currArr[0] = product.ID;
			var productline = "";
			for(var i=0 ; i < strArray.length ; i++){
				if(i > 0) { 
	  				productline = productline + "," + strArray[i];
	  			} else {
	  				productline = productline + strArray[i];
	  			}
			}
			currArr[1] = productline;
			sWriter.writeLine(currArr);
		}
		finally{
			sWriter.flush();
		}
	}
	return PIPELET_NEXT;
}
    

   

