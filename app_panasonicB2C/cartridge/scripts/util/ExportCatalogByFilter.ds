/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*

*<?xml version="1.0" encoding="UTF-8"?>
*<catalog xmlns="http://www.demandware.com/xml/impex/catalog/2006-10-31" catalog-id="shop-pna-master-catalog">
*	<product product-id="047-40009">
*		<ean/>
*		<upc/>
*		<unit/>
*		<min-order-quantity>1</min-order-quantity>
*		<step-quantity>1</step-quantity>
*		<display-name xml:lang="x-default">047-40009</display-name>
*		<short-description xml:lang="x-default">047-40009</short-description>
*		<online-flag>true</online-flag>
*		<available-flag>true</available-flag>
*		<searchable-flag>true</searchable-flag>
*		<page-attributes/>
*		<custom-attributes>
*			<custom-attribute attribute-id="UMN">047-40009</custom-attribute>
*			<custom-attribute attribute-id="dimWeight">0.000</custom-attribute>
*			<custom-attribute attribute-id="disable_dynamic_price">true</custom-attribute>
*			<custom-attribute attribute-id="faqs"></custom-attribute>
*			<custom-attribute attribute-id="productLegacyURL">shop.panasonic.com/shop/model/047-40009</custom-attribute>
*			<custom-attribute attribute-id="supportOnly">false</custom-attribute>
*		</custom-attributes>
*	</product>
*</catalog>


* For example:
*
* @input CatalogID : dw.catalog.Category
* @input IncludeSupportProducts : Boolean  
* @input IncludeWarrantyProducts : Boolean
* @input IncludeOfflineProducts : Boolean
*/
 
 importPackage( dw.system );
 importPackage( dw.order );
 importPackage( dw.util );
 importPackage( dw.web );
 importPackage( dw.net );
 importPackage( dw.catalog );
 importPackage( dw.object );
 importPackage( dw.io );
 importPackage( dw.content );

function execute( pdict : PipelineDictionary ) : Number
{	
	var IncludeSupportProducts : Boolean = pdict.IncludeSupportProducts;
	var IncludeWarrantyProducts : Boolean = pdict.IncludeWarrantyProducts;
	var IncludeOfflineProducts : Boolean = pdict.IncludeOfflineProducts;

	var fileWriter : FileWriter = null;
	var itemsNo : Number = 0;	
	// current date/time
	var calendar : Calendar = new Calendar();
	var siteCatalog : dw.catalog.Catalog = dw.catalog.CatalogMgr.getSiteCatalog();
    var catalogID : String = siteCatalog.ID;
	calendar.timeZone = "GMT";
	var dateString : String = StringUtils.formatCalendar(calendar, "yyyyMMdd");
	var filePath = File.IMPEX +'/src/catalog';
	//create new file for the specified paths
	var dir : File = new File(filePath);
	var b = dir.mkdirs();
	var initialfilename : String = "catalog" + File.SEPARATOR+ "Catalog_"+dateString+".xml";
	var archivefilename : String = "archive"  + File.SEPARATOR + "Catalog_"+dateString+".xml" ;
	try{
		var catalogimport : dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "src" + dw.io.File.SEPARATOR + initialfilename);
		
		if( catalogimport.exists() ){
			var archivecatalog : dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "src"  + dw.io.File.SEPARATOR + archivefilename);
			catalogimport.renameTo(archivecatalog);
			catalogimport.createNewFile();
		}else{
			catalogimport.createNewFile();
		}
			
		fileWriter = new FileWriter(catalogimport,'UTF-8');
		var xmlwriter : XMLStreamWriter = new XMLStreamWriter(fileWriter);
		
		var productList : SeekableIterator = ProductMgr.queryAllSiteProducts();
		
		xmlwriter.writeRaw('<?xml version="1.0" encoding="utf-8"?>\n<catalog xmlns="http://www.demandware.com/xml/impex/catalog/2006-10-31" catalog-id="' +catalogID+'">\n');
		
		while(productList.hasNext()) {
			var product : Product = productList.next();
			var isMaster : Boolean = product.isMaster();
			var isVariant : Boolean = product.isVariant();
			var productID : String = product.ID;
			if(product.online && !product.custom.isWarranty && !product.custom.supportOnly){
				xmlwriter.writeRaw('<product product-id="' + productID +'">\n\t');
				xmlwriter.writeRaw('<ean>' + product.EAN +'</ean>\n');
				xmlwriter.writeRaw('<upc>' + product.UPC +'</upc>\n');
				if ('unit' in product && product.unit != null){
					xmlwriter.writeRaw('<unit>' + product.unit +'</unit>\n');
				}
				xmlwriter.writeRaw('\n<min-order-quantity>' + product.minOrderQuantity.value +' </min-order-quantity>');	
				xmlwriter.writeRaw('\n<step-quantity> ' + product.stepQuantity.value +' </step-quantity>');
				xmlwriter.writeRaw('\n<short-description><![CDATA['+product.shortDescription+']]> </short-description>');
				xmlwriter.writeRaw('\n<display-name xml:lang="x-default">' +product.name+ '</display-name>');
				xmlwriter.writeRaw('\n<online-flag>' +product.onlineFlag +'</online-flag>');
				xmlwriter.writeRaw('\n<available-flag>'+product.availabilityModel.availability.toFixed()+'</available-flag>');
				xmlwriter.writeRaw('\n<searchable-flag>' +product.searchable +'</searchable-flag>');
				xmlwriter.writeRaw('\n<images>\n<image-group view-type="HeroImage">\n<image path="images/ccp/st-new-logo.png">\n<alt xml:lang="x-default"/>\n<title xml:lang="x-default"/>\n</image>\n</image-group>\n<image-group view-type="categoryImage2">\n<image path="images/ccp/st-new-logo.png">\n<alt xml:lang="x-default"/>\n<title xml:lang="x-default"/>\n</image>\n</image-group>\n</images>');
				if(!empty(product.pageDescription) && product.pageDescription != null){
					xmlwriter.writeRaw('\n<page_description><![CDATA['+product.pageDescription+']]></page_description>');
				}
				if(!empty(product.pageURL) && product.pageURL != null){
					xmlwriter.writeRaw('\n<page_url><![CDATA['+product.pageURL+']]></page_url>');
				}
				if(!empty(product.pageTitle) && product.pageTitle != null){
					xmlwriter.writeRaw('\n<page_title><![CDATA['+product.pageTitle+']]></page_title>');
				}
				xmlwriter.writeRaw('\n<page-attributes/>');
				xmlwriter.writeRaw('\n<custom-attributes>');
				if ('listOfCompetitiveRetailers' in product.custom && product.custom.listOfCompetitiveRetailers != null){
					var retail : ArrayList = new ArrayList();
						retail = product.custom.listOfCompetitiveRetailers;
					var competitiveRetail : String = '';
					for each(var compretail : String in retail) {
						if(!empty(compretail)) {
							competitiveRetail += "<value>"+compretail.toString()+"</value>";
						}	
					}
				xmlwriter.writeRaw('\n<custom-attribute attribute-id="listOfCompetitiveRetailers"><![CDATA['+competitiveRetail+']]></custom-attribute>');
			  }
				
				
				if ('condition' in product.custom && product.custom.condition != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="condition">' + product.custom.condition +'</custom-attribute>');
				}
				if ('createTime' in product.custom && product.custom.createTime != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="createTime">' + product.custom.createTime +'</custom-attribute>');
				}
				if ('UMN' in product.custom && product.custom.UMN != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="UMN">' + product.custom.UMN +'</custom-attribute>');
				}
				if ('dimWeight' in product.custom && product.custom.dimWeight != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="dimWeight">' + product.custom.dimWeight +'</custom-attribute>');
				}
				if ('disable_dynamic_price' in product.custom && product.custom.disable_dynamic_price != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="disable_dynamic_price">' + product.custom.disable_dynamic_price +'</custom-attribute>');
				}
				if ('isAccessory' in product.custom && product.custom.isAccessory != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="isAccessory">' + product.custom.isAccessory +'</custom-attribute>');
				} 
				if ('priceSpiderExported' in product.custom && product.custom.priceSpiderExported != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="priceSpiderExported">' + product.custom.priceSpiderExported +'</custom-attribute>');
				}  
				if ('faqs' in product.custom && product.custom.faqs != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="faqs">"faqs"</custom-attribute>');
				}   
				if ('shippableToPOBox' in product.custom && product.custom.shippableToPOBox != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="shippableToPOBox">' + product.custom.shippableToPOBox +'</custom-attribute>');
				}
				if ('productLegacyURL' in product.custom && product.custom.productLegacyURL != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="productLegacyURL">' + product.custom.productLegacyURL +'</custom-attribute>');
				}
				if ('supportOnly' in product.custom && product.custom.supportOnly != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="supportOnly">' + product.custom.supportOnly +'</custom-attribute>');
				}
				if ('use_shipping_message' in product.custom && product.custom.use_shipping_message != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="use_shipping_message">' + product.custom.use_shipping_message +'</custom-attribute>');
				}
				
				xmlwriter.writeRaw('\n</custom-attributes>');
				if(!empty(product.getClassificationCategory()) && product.getClassificationCategory() != null){
					xmlwriter.writeRaw('\n<classification-category catalog-id="' +catalogID+'">' + product.getClassificationCategory()+'</classification-category>');
				}
				if(!empty(product.getPrimaryCategory()) && product.getPrimaryCategory() != null){
					xmlwriter.writeRaw('\n<primary-category catalog-id="' +catalogID+'">' + product.getPrimaryCategory().ID+'</primary-category>');
				}
				xmlwriter.writeRaw('\n</product>');
			}
			itemsNo++;
		}
		xmlwriter.writeRaw('\n</catalog>');
	}
	finally{
		if(xmlwriter != null){
			xmlwriter.flush();
			xmlwriter.close();
		}
	}
	

   return PIPELET_NEXT;
}
