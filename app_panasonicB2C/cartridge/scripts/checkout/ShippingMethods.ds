/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input Basket : dw.order.Basket
*   @input ShippingMethodsForEachShipmentMap : dw.util.HashMap 
*   @output stdShippingMethodsList : dw.util.ArrayList
*   @output secondDayShippingMethodsList : dw.util.ArrayList
*   @output overnightShippingMethodsList : dw.util.ArrayList
*   @output whiteGolveShippingMethodsList : dw.util.ArrayList
*	@output ShippingMethodsForEachShipmentMap : dw.util.HashMap
*   @output BasketShipmentUUIDMap : dw.util.HashMap
*/
importPackage( dw.system );
importPackage( dw.util );


function execute( args : PipelineDictionary ) : Number
{
	var stdShippingMethodsList : ArrayList = new ArrayList();
	var secondDayShippingMethodsList : ArrayList = new ArrayList();
	var overnightShippingMethodsList : ArrayList = new ArrayList();
	var whiteGloveShippingMethodsList : ArrayList = new ArrayList();
	var multipleShippingStandardCodesMap : HashMap = new HashMap();
	args.BasketShipmentUUIDMap = new HashMap();
	
   	if('StandardShippingMethods' in dw.system.Site.current.preferences.custom && !empty(dw.system.Site.current.preferences.custom.StandardShippingMethods)){
	 	var stdShippingMethods : Array = dw.system.Site.getCurrent().getCustomPreferenceValue("StandardShippingMethods");
	 	for each( var listItem : String in stdShippingMethods) {
			stdShippingMethodsList.add(listItem);
			
		}
	 }
	 
	 if('SecondDayShippingMethods' in dw.system.Site.current.preferences.custom && !empty(dw.system.Site.current.preferences.custom.SecondDayShippingMethods)){
	 	var secondDayShippingMethods : Array = dw.system.Site.getCurrent().getCustomPreferenceValue("SecondDayShippingMethods");
	 	for each( var listItem : String in secondDayShippingMethods) {
			secondDayShippingMethodsList.add(listItem);
		}
	 }
	 
	if('OvernightShippingMethods' in dw.system.Site.current.preferences.custom && !empty(dw.system.Site.current.preferences.custom.OvernightShippingMethods)){
	 	var overnightShippingMethods : Array = dw.system.Site.getCurrent().getCustomPreferenceValue("OvernightShippingMethods");
	 	for each( var listItem : String in overnightShippingMethods) {
			overnightShippingMethodsList.add(listItem);
		}
	 }
	 
	 //White glove shipping method with 5-7 estimated delivery dates
	 if('WhiteGloveShippingMethods' in dw.system.Site.current.preferences.custom && !empty(dw.system.Site.current.preferences.custom.WhiteGloveShippingMethods)){
	 	var whiteGloveShippingMethods : Array = dw.system.Site.getCurrent().getCustomPreferenceValue("WhiteGloveShippingMethods");
	 	for each( var listItem : String in whiteGloveShippingMethods) {
			whiteGloveShippingMethodsList.add(listItem);
		}
	 }
	 if(!empty(args.ShippingMethodsForEachShipmentMap) && args.ShippingMethodsForEachShipmentMap.length > 0 ) {
		 for each(var shippingMethods in  args.ShippingMethodsForEachShipmentMap.entrySet()){
			 for each(var shippingMethod in shippingMethods.value){
				 if(stdShippingMethodsList.contains( shippingMethod.ID )){
					 multipleShippingStandardCodesMap.put(shippingMethods.key , shippingMethod );
					 break;
				 }
			 }
			 
			 for each(var shipment in args.Basket.shipments){
		 		if(shipment.UUID.equals(shippingMethods.key)){
					args.BasketShipmentUUIDMap.put(shipment.UUID,shipment)	; 
		 	 	}
	 		}
		 }
		 if(multipleShippingStandardCodesMap.length > 1 ) {
			 for each(var shippingStandardCode in multipleShippingStandardCodesMap.entrySet()){
				 args.ShippingMethodsForEachShipmentMap.remove(shippingStandardCode.key);
				 args.ShippingMethodsForEachShipmentMap.put(shippingStandardCode.key,new ArrayList(shippingStandardCode.value));
			 }
		}
	 }
	 
	 
	 
	 args.stdShippingMethodsList = stdShippingMethodsList;
	 args.secondDayShippingMethodsList = secondDayShippingMethodsList;
	 args.overnightShippingMethodsList = overnightShippingMethodsList;
	 args.whiteGolveShippingMethodsList = whiteGloveShippingMethodsList;

   return PIPELET_NEXT;
}
