/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*  	 	@input  Basket 					: dw.order.Basket
*		@input  MainProductID 			: String
*		@input  SquareTradeProductID 	: String
*		@input  MainProductQuantity 	: String
*-   @output ExampleOut : Number
*
*/
 importPackage( dw.system );
 importPackage( dw.web );
 importPackage( dw.value );
 importPackage( dw.util );
 importPackage( dw.order );
 importPackage( dw.campaign );
 importPackage( dw.catalog );
 importPackage( dw.customer );

function execute( args : PipelineDictionary ) : Number
{

  	// ===================================================
	// =====     	PROCESS INPUT PARAMETERS 		 =====
    // ===================================================

	var basket 				 : Basket = args.Basket;
	var MainProductID 		 : String = args.MainProductID;
	var SquareTradeProductID : String = args.SquareTradeProductID;
	var MainProductQuantity  : String = args.MainProductQuantity;
	
	// ===================================================
	// =====   UPDATE WARRANTY PRODUCTLINEITEMS      =====
    // ===================================================
	try{
		updateWarrantyLineItem(basket,MainProductID,SquareTradeProductID,MainProductQuantity);
		return PIPELET_NEXT;
	}catch(e){
		Logger.error("Error while executing the script UpdateWarrantyItems.ds  Error : "+e.message);
		return PIPELET_NEXT;
	}
    
}

/**
 * FUNCTION: updateWarrantyLineItem
 *
 * Updates the warranty line items based upon the squaretrade selection
 * 
 */
function updateWarrantyLineItem(basket:Basket,MainProductID:String,SquareTradeProductID:String,MainProductQuantity:String)
{
	// iterate all product line items of the basket 
	var productLineItems : Iterator = basket.getAllProductLineItems().iterator();
	while(productLineItems.hasNext())
	{
		var productLineItem : ProductLineItem = productLineItems.next();
	
		var product : Product = productLineItem.product;
		var associationString : String ="";
		if(product.ID == SquareTradeProductID){
	
			//Check if attribute string is present or not
			if('coveredProducts' in productLineItem.custom && !empty(productLineItem.custom.coveredProducts)){
				associationString = productLineItem.custom.coveredProducts;
			}
			
			if(associationString.length != 0){
				if(checkMainProductInCoveredProductString(associationString,MainProductID)){
					associationString = getUpdatedAssociationString(associationString,MainProductID,MainProductQuantity);
					updateAssociationStringInProductLineItem(associationString,productLineItem);
				}else{
					associationString = associationString.trim().concat(",").concat(MainProductID.concat(":").concat(MainProductQuantity));
					updateAssociationStringInProductLineItem(associationString,productLineItem);
				}
				
			}else{
				associationString = associationString.trim().concat(MainProductID.concat(":").concat(MainProductQuantity));
				updateAssociationStringInProductLineItem(associationString,productLineItem);
			}
		
		}

    }
}

//function check main product in custom string or not

function checkMainProductInCoveredProductString(AssociationString:String,MainProductID:String){
	var status : Boolean = false;
	if(AssociationString.length != 0){
		for each(var str : String in AssociationString.split(",")){
			if(str.split(":")[0].toString() == MainProductID){
				status = true;
				break;
			}	
			
		}
	}
 return status;
}

//function get the new assosciation string if main product is exist in the association string
function getUpdatedAssociationString(AssociationString:String,MainProductID:String,MainProductQuantity:String){
	var newAssociationString : String = "";
	if(AssociationString.length != 0){
		for each(var str : String in AssociationString.split(",")){
			 var pid : String = str.split(":")[0].toString();
			 var qty : String = str.split(":")[1].toString();
			if(pid == MainProductID){
				qty = ((new Number(qty))+(new Number(MainProductQuantity))).toString();
				
			}	
			
			if(newAssociationString.length != 0){
				newAssociationString = newAssociationString.trim().concat(",").concat(pid.concat(":").concat(qty));
			}else{
				newAssociationString = newAssociationString.trim().concat(pid.concat(":").concat(qty));
			}
		
		}
	}
 return newAssociationString;
}

//update association string in productlineitem
function updateAssociationStringInProductLineItem(AssociationString:String,productLineItem:ProductLineItem){
	
				if(AssociationString.length != 0){
				    productLineItem.custom.coveredProducts = AssociationString;
				}else{
					productLineItem.custom.coveredProducts = null;
				}
	
}


