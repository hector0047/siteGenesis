/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
* This method use ProductSearchModel and gives the products in order(instock,backorder,preorder,Not Available) 
*
* For example:
*
*   @input ProductSearchResult : dw.catalog.ProductSearchModel The search model.
*   @output newsruleSet : dw.util.LinkedHashSet
*

*/
importPackage( dw.system );
importPackage( dw.catalog);
importPackage( dw.util );
importPackage( dw.web );

function execute( args : PipelineDictionary ) : Number 
{
   
    var newsSet : LinkedHashSet = new LinkedHashSet();
    var skipRule : ArrayList = new ArrayList();
    var newsSetInstock : LinkedHashSet = new LinkedHashSet();
    var newsSetPreOrder : LinkedHashSet = new LinkedHashSet();
    var newsSetBackOrder : LinkedHashSet = new LinkedHashSet();
    var newsSetOutofStock : LinkedHashSet = new LinkedHashSet();
    var _httpMap = dw.web.HttpParameterMap = args.CurrentHttpParameterMap;
 var skipList : Array = dw.system.Site.getCurrent().getCustomPreferenceValue("skipSortingRule");
if(!empty(skipList)){
  for each( var listItem : String in skipList) {
   var skipSortingRule : Boolean = false;
   if(listItem == args.ProductSearchResult.sortingRule.ID){
     var skipSortingRule : Boolean = false;
     args.newsruleSet = null; 
    break;  
   }else{
    var skipSortingRule : Boolean = true;
   }
  }
 }
   if(skipSortingRule == true){
     try{ 
        for each(var productSearchHit: ArrayList in args.ProductSearchResult.productSearchHits.asList()) {
         if(productSearchHit.product.master){
          var PVM : ProductVariationModel = productSearchHit.product.getVariationModel();
           //var defaultvar : Product = PVM.defaultVariant;
           var Product : Product = PVM.getDefaultVariant();
          //Evaluation Error: Wrapped java.lang.ClassCastException (app_panasonicB2C:search/NewGetProductBasedOnSortRule.ds#38) 
         }else{
          var Product : Product = productSearchHit.product;
         } 
         if(!empty(Product) && Product.availabilityModel != null){ 
       var availabilityModel = Product.availabilityModel;
        var availabilityStatus = Product.availabilityModel.availabilityStatus;
       var inventoryRecord = Product.availabilityModel.inventoryRecord;
      
       if(availabilityStatus == dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_IN_STOCK && inventoryRecord != null && inventoryRecord.stockLevel.available){
        newsSetInstock.add(productSearchHit);
       }
       else if (availabilityStatus == dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER){
        newsSetPreOrder.add(productSearchHit);
       }
       else if (availabilityStatus == dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_BACKORDER){
        if (Product.availabilityModel.inventoryRecord != null && Product.availabilityModel.inventoryRecord.inStockDate != null && Product.availabilityModel.inventoryRecord.inStockDate>new Date() && (Product.availabilityModel.inventoryRecord.inStockDate.getFullYear().toString() != '9999')){
         if (('isPreOrderable' in Product.custom) && (Product.custom.isPreOrderable)){
          newsSetPreOrder.add(productSearchHit);
         }
         else{
          newsSetBackOrder.add(productSearchHit);
         }
        } 
        else{
         if(('isPreOrderable' in Product.custom) && (Product.custom.isPreOrderable)){
          newsSetPreOrder.add(productSearchHit);
         }
         else{
          newsSetBackOrder.add(productSearchHit);
         }
        }
       }
       else{
        if(availabilityStatus == dw.catalog.ProductAvailabilityModel.AVAILABILITY_STATUS_IN_STOCK){
         newsSetInstock.add(productSearchHit);
        }else{
         newsSetOutofStock.add(productSearchHit); 
        }
       }
      }
        } 
      newsSet.addAll(newsSetInstock);
        newsSet.addAll(newsSetPreOrder);
        newsSet.addAll(newsSetBackOrder);
        newsSet.addAll(newsSetOutofStock);
        args.newsruleSet = newsSet;
     }
    catch(e) { 
       Logger.error("error while executing GetProductBasedOnSortRule.ds ",e.message);
       args.newsruleSet = null; 
       return PIPELET_NEXT;
     }
   }      
   return PIPELET_NEXT;
}