/*
* GetProductXmlData.ds
*
*
*
*	@input  XmlStringContent : String
*	
*   
*   
*	
*	@output ContentUrlList : dw.util.LinkedHashSet
*
*/ 
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.io );
importPackage( dw.util );
function execute( args : PipelineDictionary ) : Number
{
	try{	
		
		if(!empty(args.XmlStringContent)){
			var str  : String = "";
			for each(var s : String in args.XmlStringContent.toString().trim().split('\n')){
				str = str+s.replace("&","&amp;");
			}
			args.ContentUrlList = returnUrls(str);
			return PIPELET_NEXT;
		}else{
			args.ContentUrlList = null;
			return PIPELET_NEXT;
		}
	}
	catch(e)
	{
		Logger.error("Error while executing the script GetProductXmlData.ds  Error : "+e.message);
		args.ContentUrlList = null;
		return PIPELET_NEXT;
	}
}

function returnUrls(fileString : String) {
		var inputXmlFile : String = '<?xml version="1.0" encoding="UTF-8"?>'+fileString.trim().toString();
		var xmlReader : XMLStreamReader = new XMLStreamReader(new Reader(inputXmlFile));
		var urlList : LinkedHashSet = new LinkedHashSet();
		var myObject : XML = null;
			while (xmlReader.hasNext())
			{
			  if (xmlReader.next() == XMLStreamConstants.START_ELEMENT)
			  {
			     var localName : String = xmlReader.getLocalName();
			     if (localName == "resourceList")
			     {			       
			       myObject = xmlReader.getXMLObject();
			       					      
			     }
			  }
			}
		
		var childElements : XMLList = myObject.children();			
		var localeName : String = myObject.localName();
		xmlReader.close();				
		return iterateXml(childElements, localeName);
	
}

	
function iterateXml(myObjects : XMLList , localeName : String) {
	
	var urlList : LinkedHashSet = new LinkedHashSet();
	    for each ( var xmlObject : XML in myObjects) {
	    	var currentTitle = xmlObject.@["description"].toString().trim();
			var currentUrl = xmlObject.@["url"].toString().trim();
			var thumString : String = currentTitle+"$"+currentUrl;
				if(!empty(thumString) && thumString != 'null' && thumString.trim()!='$')
				{
				 	urlList.add(thumString);
				}
		
		    }
	 return urlList;
}
