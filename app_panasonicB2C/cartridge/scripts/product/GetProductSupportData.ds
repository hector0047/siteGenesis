/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*@input  Product : dw.catalog.Product
*@output productOwnerImages : dw.util.LinkedHashSet
*@output advancedFeaturesManuals : dw.util.LinkedHashSet
*@output quickSetupGuide : dw.util.LinkedHashSet
*@output eHelpManuals : dw.util.LinkedHashSet
*@output dimensionSheet : dw.util.LinkedHashSet
*@output others : dw.util.LinkedHashSet
*@output additionalDocuments : dw.util.LinkedHashSet
*@output operatingInstructions : dw.util.LinkedHashSet
*@output firmware : dw.util.LinkedHashSet  
*@output firmwareSupport : dw.util.LinkedHashSet
*@output driver : dw.util.LinkedHashSet
*@output howToGuide : dw.util.LinkedHashSet
*@output software : dw.util.LinkedHashSet
*@output wifiConnectionGuides : dw.util.LinkedHashSet
*@output faqs : dw.util.LinkedHashSet
*/
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.io );
importPackage( dw.util );
importScript("product/ProductSupportUtil.ds");
function execute( args : PipelineDictionary ) : Number
{
	
	if(('reviewsAndAwardsImageURL' in args.Product.custom && !empty(args.Product.custom.reviewsAndAwardsImageURL))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.reviewsAndAwardsImageURL.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.productOwnerImages =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.productOwnerImages = null;
	}
	
	
	if(('advancedFeaturesManuals' in args.Product.custom && !empty(args.Product.custom.advancedFeaturesManuals))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.advancedFeaturesManuals.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.advancedFeaturesManuals =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.advancedFeaturesManuals = null;
	}
	
	if(('quickSetupGuide' in args.Product.custom && !empty(args.Product.custom.quickSetupGuide))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.quickSetupGuide.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.quickSetupGuide =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.quickSetupGuide = null;
	}
	
	if(('eHelpManuals' in args.Product.custom && !empty(args.Product.custom.eHelpManuals))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.eHelpManuals.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.eHelpManuals =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.eHelpManuals = null;
	}

	if(('dimensionSheet' in args.Product.custom && !empty(args.Product.custom.dimensionSheet))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.dimensionSheet.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.dimensionSheet =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.dimensionSheet = null;
	}
	
	if(('additionalDocuments' in args.Product.custom && !empty(args.Product.custom.additionalDocuments))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.additionalDocuments.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.additionalDocuments =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.additionalDocuments = null;
	}
	
	if(('operatingInstructions' in args.Product.custom && !empty(args.Product.custom.operatingInstructions))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.operatingInstructions.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.operatingInstructions =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.operatingInstructions = null;
	}
	if(('firmware' in args.Product.custom && !empty(args.Product.custom.firmware))){
		/*var str  : String = "";
		for each(var s : String in args.Product.custom.firmware.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}*/
		args.firmware =  ProductSupportUtil.getFirmwareSupportAttributes(args.Product.custom.firmware.toString().trim());
		//args.firmware =  ProductSupportUtil.getFirmwareSupportAttributes(str);
	}else{
		args.firmware = null;
	}
	if(('firmware' in args.Product.custom && !empty(args.Product.custom.firmware))){
		/*var str  : String = "";
		for each(var s : String in args.Product.custom.firmware.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}*/
		args.firmwareSupport =  ProductSupportUtil.getFirmwareSupportAttributes(args.Product.custom.firmware.toString().trim());
		//args.firmwareSupport =  ProductSupportUtil.getFirmwareSupportAttributes(str);	
	}else{
		args.firmwareSupport = null;
	}
	if(('driver' in args.Product.custom && !empty(args.Product.custom.driver))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.driver.toString().trim().split('\n')){
			str = str+ProductSupportUtil.filterUrl(s.toString().trim().replace("\r",""));
		}
		args.driver =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.driver = null;
	}
	if(('howToGuide' in args.Product.custom && !empty(args.Product.custom.howToGuide))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.howToGuide.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.howToGuide =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.howToGuide = null;
	}
	if(('software' in args.Product.custom && !empty(args.Product.custom.software))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.software.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.software =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.software = null;
	}
	if(('other' in args.Product.custom && !empty(args.Product.custom.other))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.other.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.others =  ProductSupportUtil.getOtherAttributes(str,args.Product);	
	
	}else{
		args.others = null;
	}
	if(('wifiConnectionGuides' in args.Product.custom && !empty(args.Product.custom.wifiConnectionGuides))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.wifiConnectionGuides.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.wifiConnectionGuides =  ProductSupportUtil.getXmlData(str);	
	}else{
		args.wifiConnectionGuides = null;
	}
	//PANC-928: Start
	if(('faqs' in args.Product.custom && !empty(args.Product.custom.faqs))){
		var str  : String = "";
		for each(var s : String in args.Product.custom.faqs.toString().trim().split('\n')){
			str = str+s.replace("&","&amp;");
		}
		args.faqs =  ProductSupportUtil.getFaqAttributes(str);	
	}else{
		/*var urlList : LinkedHashSet = new LinkedHashSet();
		thumString = "Click here for General FAQs$"+"<a href='http://eng-na.faq.panasonic.com/' class='faq-link' target='_blank'>Please click here to visit our FAQ site for answers to frequently asked questions.</a>";
		urlList.add(thumString);
		args.faqs = urlList;*/
		args.faqs = null;
	}
	//PANC-928: End
    return PIPELET_NEXT;
}
