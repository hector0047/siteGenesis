
importPackage(dw.rpc);
importPackage(dw.order);
importPackage(dw.util);

importScript("int_paypal:cart/Credentials.ds");
importScript("int_paypal:cart/WsUtil.ds");

var sf = require("bc_serviceframework");
var PayPalDoExpressCheckout = require("../objects/PayPalDoExpressCheckout");
 
function getPayPalDoExpressCheckoutService() {
	return PayPalDoExpressCheckoutService;
}

/**
 * @class
 */
var PayPalDoExpressCheckoutService = sf.getService('AbstractSoapService').extend(
/** @lends PayPalDoExpressCheckoutService.prototype */ 
{
	/**
	 * @constructs PayPalDoExpressCheckoutService
	 * @augments AbstractSoapService
	 */
	init: function() {
		this._super("PayPalExpress" , new PayPalDoExpressCheckout());
	},
	
	
	/**
	 * Initialises the webservice object parsed from the given WSDL File
	 */
	initServiceClient: function() {
		
		this.webReference = webreferences.PayPalSvcDev;	
		if (dw.system.System.getInstanceType() == dw.system.System.PRODUCTION_SYSTEM) {
			this.webReference = webreferences.PayPalSvc;
		}
				
		this.serviceClient = this.webReference.getService("PayPalAPIInterfaceService", "PayPalAPIAA");
	},

	createRequest: function (doExpressCheckoutInfo) {
		var order : Order = doExpressCheckoutInfo.order;
		var orderNo : String = doExpressCheckoutInfo.orderNo;
		var PAYPAL_PAYMENT : String = "PayPal";
		var paymentInstruments : Collection = order.paymentInstruments;
		var paymentInstrument : OrderPaymentInstrument = null;
		paymentInstrument = paymentInstruments.iterator().next();
		
		var paymentProcessor : PaymentProcessor = doExpressCheckoutInfo.paymentProcessor;
		var paypalPayerID : String = paymentInstrument.custom.paypalPayerID;
		var paymentAction : String = paymentInstrument.custom.paypalPaymentAction;
		
		var ppxService : Stub = this.serviceClient;
		var paypalExpress : WebReference = this.webReference;
		
		// security header
		SetCredentials( paymentProcessor, ppxService );
		
		var details = new paypalExpress.PaymentDetailsType();
		var currencyID = paypalExpress.CurrencyCodeType.fromString( order.getCurrencyCode() );

		//  Sets the invoiceID value for this PaymentDetailsType.
		details.setInvoiceID( orderNo );

        // Sets the purchased items for this PaymentDetailsType.
        var items : Collection = order.getAllProductLineItems();
        var itemType;
        var item : ProductLineItem;
        var array1 : Array = new Array();
        
        for( var i = 0; i < items.size(); i++ ) 
        {
        	item = items[i];
        	itemType = new paypalExpress.PaymentDetailsItemType();

			// Sets the name value for this PaymentDetailsItemType.
        	itemType.setName( item.getProductName() );
			// Sets the number value for this PaymentDetailsItemType.
			itemType.setNumber( item.getProductID() );
 			// Sets the quantity value for this PaymentDetailsItemType.
			itemType.setQuantity( item.quantity.value );
			amount = new paypalExpress.BasicAmountType( item.basePrice );
        	amount.currencyID = currencyID;
   	    	itemType.setAmount( amount );
 
 			array1.push( itemType );

			var adjustments : Collection = item.getPriceAdjustments();
			var adjust : PriceAdjustment = null;
			var lineItem : LineItem = null
			
			for each( adjust in adjustments ) 
			{
				itemType = new paypalExpress.PaymentDetailsItemType();
				itemType.setName( adjust.promotion == null ? "PriceAdjustment" : adjust.promotion.description );
				itemType.setQuantity( 1 );
				amount = new paypalExpress.BasicAmountType( adjust.netPrice.value );
				amount.currencyID = currencyID;
				itemType.setAmount( amount );
				array1.push( itemType );
			}
 		}
 		
 		// order Price adjustments
		var orderAdjustments : Collection = order.getPriceAdjustments();
		var orderAdjust : PriceAdjustment = null;
		
		for each( orderAdjust in orderAdjustments ) 
		{
 			if (orderAdjust.netPrice.value != null) 
 			{
				itemType = new paypalExpress.PaymentDetailsItemType();
				itemType.setName("order Discount");
				itemType.setQuantity( 1 );
				amount = new paypalExpress.BasicAmountType( orderAdjust.netPrice.value );
				amount.currencyID = currencyID;
				itemType.setAmount( amount );
				array1.push( itemType );
 			}
		}
 		
 		Logger.debug("before setPaymentDetailsItem");
 		details.setPaymentDetailsItem( array1 );
		Logger.debug("after setPaymentDetailsItem");
		
		// Send Shipping Address to PayPal if process originated from Payment page 
		if (paymentInstrument.custom.paypalOrigination == "PaymentPage") 
		{
		}
 		
		// Sets the itemTotal value for this PaymentDetailsType.
		amount = new paypalExpress.BasicAmountType( order.getAdjustedMerchandizeTotalNetPrice().getValue() );
		amount.currencyID = currencyID; 
 		details.setItemTotal( amount );

        // Sets the shippingTotal value for this PaymentDetailsType.
		amount = new paypalExpress.BasicAmountType( order.getAdjustedShippingTotalNetPrice() );
		amount.currencyID = currencyID;
 		details.setShippingTotal( amount );
       	
        // Sets the taxTotal value for this PaymentDetailsType
        amount = new paypalExpress.BasicAmountType( order.getTotalTax() );
        amount.currencyID = currencyID;
 		details.setTaxTotal( amount ); 
       	
        // Sets the orderTotal value for this PaymentDetailsType.
        amount = new paypalExpress.BasicAmountType( order.getTotalGrossPrice().getValue() );
        amount.currencyID = currencyID;
 		details.setOrderTotal( amount );
    
       	//Button Source ButtonSource
 		details.setButtonSource( doExpressCheckoutInfo.buttonSource ); 

		// in the end we pack all the information together ...
 		var doRequest = new paypalExpress.DoExpressCheckoutPaymentRequestDetailsType();
 		var arrayDetails : Array = new Array();
		arrayDetails.push(details);
		
 		doRequest.setPaymentDetails( arrayDetails );
 		doRequest.setPayerID( paypalPayerID );

		// set the paypal token from payment instrument that was set in GetExpressCheckout script
 		doRequest.setToken( paymentInstrument.getCustom().paypalToken );
		
		//Payment Action Authorization/Sale/Order
		doRequest.setPaymentAction( paypalExpress.PaymentActionCodeType.Authorization );
		
		if (paymentAction != null && paymentAction == "Order") 
		{
			doRequest.setPaymentAction(paypalExpress.PaymentActionCodeType.Order);
		} 
		else if (paymentAction != null && paymentAction == "Sale") 
		{
			doRequest.setPaymentAction(paypalExpress.PaymentActionCodeType.Sale);
		}

 		var request = new paypalExpress.DoExpressCheckoutPaymentRequestType();
 		// never forget the version
 		request.setVersion( "104.0" );
 		request.setDoExpressCheckoutPaymentRequestDetails( doRequest );
 		var req = new paypalExpress.DoExpressCheckoutPaymentReq();
 		req.setDoExpressCheckoutPaymentRequest( request );
 		
 		return req;
	},
	
	initStatusFromResponse: function () {
		this.status.code = "OK";
	},
		
	/** 
	 * Call the service and return the response.
	 * 
	 */ 
	executeServiceCall: function() {	
		return this.serviceClient.doExpressCheckoutPayment( this.request );
	},
	
	getDummyResponse: function() : Object {
		return this.object.dummy();
	}
});

sf.registerService('PayPalExpress',PayPalDoExpressCheckoutService);