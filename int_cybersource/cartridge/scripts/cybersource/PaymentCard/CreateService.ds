/**
* Performs the creation of a customer.
*
* @input Basket : dw.order.Basket Get payment Instrument from this basket if not specified in PaymentInstrument parameter.
* @input PaymentInstrument : dw.order.PaymentInstrument The payment instrument to update with subscription ID (if null, use first payment card from Basket parameter).
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input CreditCardForm : dw.web.FormElement The form containing the credit card data
* @input CreditCardData : Object
* @input IPAddress : String The client's IP address

* @input  billTo : Object 
* @input  RequestID : String
* @input  card : Object
* @input  purchaseTotals : Object 
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output AVSCode : String The AVS reason code returned by Cybersource (Anything different than 'N' = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
*
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output MissingFieldsArray : Array Contains any missing (and required) fields to complete DAV processing
* @output InvalidFieldsArray : Array Contains any invalid (and required) fields to complete DAV processing
* @output StandardizedAddress : Object Contains any 'corrections' made to the address from standards point of view
* @output PaySubscriptionID : Object Contains paySubscriptionID
*
* @output Temp : Object;
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage (dw.value);
importScript('int_cybersource:cybersource/Cybersource_BillTo_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_ShipTo_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_Card_Object.ds');
importScript('int_cybersource:cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('int_cybersource:cybersource/libCybersource.ds');

function execute( pdict : PipelineDictionary ) : Number
{

	//**************************************************************************//
	// read pipeline dictionary input parameter	
	//**************************************************************************//    
	var ccdata : CreditCardInfoHelper = pdict.CreditCardData;
    var basket : Basket = pdict.Basket;
    var paymentInstrument : PaymentInstrument = pdict.PaymentInstrument;
    var orderNo : String = pdict.OrderNo;
   	var billToObject: BillTo_Object = pdict.billTo;
	var cardObject: Card_Object = pdict.card;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;
	var reqID : String = pdict.RequestID;

	// If no payment instrument specified in arguments, use first credit card in basket
	if (paymentInstrument == null && basket != null && basket.getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD) != null && basket.getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD).length > 0) {
		paymentInstrument = basket.getPaymentInstruments(PaymentInstrument.METHOD_CREDIT_CARD)[0];
	}
	
	// If no card payment instrument provided or found, can't save subscription ID in this script
	if (paymentInstrument == null)
	{
		Logger.info("No payment instrument provided or found in basket. Pay subscription ID will be returned to pipeline, but will not be saved.");
	}

	// If no PurchaseTotals object specified in arguments, create a sparse object containing only currency
	if (purchaseObject == null)
	{
		purchaseObject = new PurchaseTotals_Object();
		purchaseObject.setCurrency(Site.getCurrent().getDefaultCurrency());
	}
	
	// If no billto info available, we can't create a subscription ID (billing address is required)
	if (billToObject == null)
	{
		Logger.error("No billing address available. Cannot request CyberSource pay subscription.");
		return PIPELET_ERROR;		
	}
	
	// If no billto info available, we can't create a subscription ID (billing address is required)
	if (cardObject == null)
	{
		Logger.error("No card data object available. Cannot request CyberSource pay subscription.");
		return PIPELET_ERROR;		
	}

	// Get customer ID to use for subscription, from customer associated with current session
	var customerId;
	
	// Use customer number from profile for registered customers, else anonymous customer ID as placeholder
	if (!empty(session.customer))
	{
		if (session.customer.registered) 
		{
			customerId = session.customer.profile.customerNo;
		}
		else
		{
			customerId = session.customer.ID;
		}
	}

	if (customerId == null)
	{
		Logger.error("No customer number (registered customers) or customer ID (anonymous) found in session. Cannot request CyberSource pay subscription.");
		return PIPELET_ERROR;
	}
	
	//**************************************************************************//
	// Set WebReference & Stub
	//**************************************************************************//	
	var CybersourceHelper = getCybersourceHelper();	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	CybersourceHelper.setEndpoint(service);

	if(!CybersourceHelper.createHeader(service))
	{
		return PIPELET_ERROR;
	}


	var request = new csReference.RequestMessage();
	CybersourceHelper.addPaySubscriptionCreateService(
			request,
			billToObject,
			purchaseObject,
			cardObject,
			customerId,
			'true',
			reqID
	);

	//**************************************************************************//
	// Execute Request
	//**************************************************************************//	
	var response = null;
	try
	{
		response = service.runTransaction(request);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in CCAuthRequestInfo request ( {0} )",e.message);
		
		if(e.message.indexOf("SocketTimeoutException") != -1){
            pdict.ReasonCode = 0; //set timeout error code 0
            return PIPELET_NEXT;
		}       
		
		return PIPELET_ERROR;
	}
	
	if(response == null)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in CCAuthRequestInfo: null response");
		return PIPELET_ERROR;
	}
		
	//**************************************************************************//
	// Process Response
	//**************************************************************************//		
	pdict.Temp = protocolResponse( response );
	//pdict.Temp = getAvailableFunctions( service );
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();

	pdict.Decision = response.decision;
	
	/**********************************************/
	/* DAV-related WebService response processing */
	/**********************************************/
	if( !empty(response.missingField) ) {
		pdict.MissingFieldsArray = response.missingField;
	}
	if( !empty(response.invalidField) ) {
		pdict.InvalidFieldsArray = response.invalidField;
	}	
	
	if(null != response.davReply){
		pdict.DAVReasonCode = response.davReply.reasonCode.get();
		
		if( !empty(response.davReply.standardizedAddress1) ) {
			var stdAddress : Object = new Object();
			stdAddress.firstName = pdict.shipTo.firstName;
			stdAddress.lastName = pdict.shipTo.lastName;
			stdAddress.address1 = response.davReply.standardizedAddress1;
			stdAddress.address2 = response.davReply.standardizedAddress2;
			stdAddress.city = response.davReply.standardizedCity;
			stdAddress.state = response.davReply.standardizedState;
			stdAddress.postalCode = response.davReply.standardizedPostalCode;
			stdAddress.country = response.davReply.standardizedCountry;
			pdict.StandardizedAddress = stdAddress;
		}
	}
	
	var sub = response.getPaySubscriptionCreateReply();

	if( CybersourceHelper.isTokenizationUsed() ) {
		var sub = response.getPaySubscriptionCreateReply();
		if( !empty(sub) ) {
			// Record subscription ID on payment instrument, if one was provided or found in basket and it doesn't already have a subscription
			if (paymentInstrument != null)
			{
				paymentInstrument.custom.paySubscriptionID = sub.getSubscriptionID();
			}
			
			pdict.PaySubscriptionID = sub.getSubscriptionID();
		}
	}

	//**************************************************************************//
	//Log response code specific data for further processing
	//**************************************************************************//
	var logTransactionData : String = " Order No = " +orderNo;
	logTransactionData += ", Cybersource Request ID = " +response.requestID;
	logTransactionData += ", Cybersource Request Token = " +response.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +response.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +response.decision;
	if( !empty(response.paySubscriptionCreateReply) ) {
		logTransactionData += ", Cybersource PaySubscriptionID = " +response.paySubscriptionCreateReply.subscriptionID;
	}


	switch ( response.reasonCode.get() )
	{
		case 100:	
			Logger.info("[CCAuthRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction.");
			break;	
		case 101:	
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 101] [FATAL] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
			break;	
		case 102:								
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 102] [FATAL] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data. The could be due to coding error since all required fields should be first validated by the COSubmit pipeline.");
			break;	
		case 150:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 150] [FATAL] " + logTransactionData + " Error Message = Error: General system failure.");
			break;				
		case 151:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 151] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
			break;				
		case 152:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 152] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
			break;	
		case 234:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 234] [FATAL] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
			break;
		case 400:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 400] [WARN] " + logTransactionData + " Error Message = The fraud score exceeds your threshold. - Customer support to handle the order. ");
			break;
		case 480:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 480] [WARN] " + logTransactionData + " Error Message = The order is marked for review by Decision Manager. - ");
			break;						
		case 481:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 481] [WARN] " + logTransactionData + " Error Message = The order is rejected by Decision Manager. - Customer support to handle the order. ");
			break;			
		default:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code:" + response.reasonCode.get() +"] [WARN] " + logTransactionData + ", Error Message = Authorization Denied - ");
			break;
	}
	
    return PIPELET_NEXT;
}

function protocolResponse( response ) : HashMap
{
	var debug : Boolean = Site.getCurrent().getCustomPreferenceValue("CsDebugCybersource");
	if( true || debug )
	{
		var arr : HashMap = new HashMap();
		var xx : String;
		for ( xx in response )
		{
			arr.put( xx, response[xx] );
		}
		for ( xx in response.payPalPaymentReply )
		{
			trace( "checking " + xx );
			try
			{
				arr.put( "PayPalPaymentReply." + xx, response.payPalPaymentReply[xx] );
			}
			catch ( exception )
			{
				arr.put( "PayPalPaymentReply." + xx, " caused ex " + exception );
			}
		}
		
		var nullList : Array = new Array();
		var qq : String;
		var iter : Iterator;
		var retMap : HashMap = new HashMap();
		for ( iter = arr.keySet().iterator(); iter.hasNext(); )
		{
			qq = iter.next();
			if ( arr.get( qq ) == null )
			{
				nullList.push( qq );
				// arr.remove( qq );
			} 
			else
			{
				retMap.put( qq, arr.get( qq ) );
			}
		} 
		if ( qq.length > 0 )
		{
			retMap.put( "<<NullList>>", nullList ); 
		}
		return retMap;
	}
}
