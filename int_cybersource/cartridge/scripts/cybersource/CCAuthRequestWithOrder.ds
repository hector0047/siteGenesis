/**
* Performs the authorization of the credit card. If present payer authentication information is
* sumbitted in the auth request.
*
* @input Order : dw.order.Order The order used for Authorization
* @input Amount : dw.value.Money The amount to authorize
* @input OrderNo : String The order no
* @input IPAddress : String The client's IP address

* @input  billTo : Object 
* @input  shipTo : Object
* @input  subscriptionId : String
* @input  purchaseTotals : Object 
*
* optional payer auth input data 
* if XID is provided (not null) the PA data is added to the request
*
* @input CAVV : String The cybersource PAValidate reply field - is a unique identifier generated by the customer's issuing bank for Verified by VISA transaction
* @input UCAFAuthenticationData : String The cybersource PAValidate reply field - AAV is a unique identifier generated by the customer's issuing bank for MasterCard SecureCode transaction.
* @input UCAFCollectionIndicator : String The cybersource PAValidate reply field
* @input CommerceIndicator : String The cybersource PAValidate reply field
* @input XID : String The cybersource PAValidate reply field - A unique transaction ID generated for each payment authentication request (PAReq) message. The PARes returned by issuing bank contains the XID of the PAReq.
* @input ECIRaw : String The cybersource PAValidate reply field - Electronic commerce indicator (ECI) value that may be returned for Visa, MasterCard, and JCB
* @input CurrentShipmentId : String The current auth call shipment id
*
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output ReasonMessage : String The global reason message as returned by Cybersource (corresponds to ReasonCode)
* @output DisplayMessageStatus : dw.system.Status A status object whose ID is that of a string resource in checkout.properties to display as human-readable error message.
* @output AVSCode : String The AVS reason code returned by Cybersource (Anything different than 'N' = Success)
* @output MaskedAccountNumber : String The Credit card number, with all digits masked exceptb first six, last four.
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output MerchantReferenceCode : String The merchant reference code sent with the authorization request
*
* @output AuthorizationReasonCode : Number The auth reason code returned by Cybersource (100 = Success)
* @output AuthorizationAmount : String The amount authorized by Cybersource
* @output AuthorizationCode : String The authorizationCode returned by Cybersource
* @output AuthorizationReconciliationID : String A unique transaction reconciliation ID generated for each authorization.
*
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output MissingFieldsArray : Array Contains any missing (and required) fields to complete DAV processing
* @output InvalidFieldsArray : Array Contains any invalid (and required) fields to complete DAV processing
* @output StandardizedAddress : Object Contains any 'corrections' made to the address from standards point of view
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output DecisionManagerResponse : String Contains DecisionManager XML data for export with order
*
* @output Temp : Object;
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value );
importScript('cybersource/Cybersource_BillTo_Object.ds');
importScript('cybersource/Cybersource_ShipTo_Object.ds');
importScript('cybersource/Cybersource_Card_Object.ds');
importScript('cybersource/Cybersource_PurchaseTotals_Object.ds');
importScript('cybersource/libCybersource.ds');
importScript('cybersource/DecisionManagerDataAdapter.ds');

function execute( pdict : PipelineDictionary ) : Number
{

	//**************************************************************************//
	// read pipeline dictionary input parameter	
	//**************************************************************************//    
	var subscriptionId : String = pdict.subscriptionId;
	var order : Order = pdict.Order;
    var orderNo : String = pdict.OrderNo;
   	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	var purchaseObject: PurchaseTotals_Object = pdict.purchaseTotals;


	//**************************************************************************//
	// Check if order exists
	//**************************************************************************//
	if(order == null){
		Logger.error("Please provide a order!");
		return PIPELET_ERROR;
	}

	//**************************************************************************//
	// Set WebReference & Stub
	//**************************************************************************//	
	var CybersourceHelper = getCybersourceHelper();	
	var csReference : WebReference = webreferences.CyberSourceTransaction;
	var service : Stub = csReference.getService("TransactionProcessor", "portXML");
	CybersourceHelper.setEndpoint(service);
	
	// If endpopint is set to "Missing", force a timeout, for testing "gateway down" case
	if (CybersourceHelper.getEndpoint() == "Missing") 
	{
		service.setTimeout(1);
	}
	
	if(!CybersourceHelper.createHeader(service))
	{
		return PIPELET_ERROR;
	}
	

	//**************************************************************************//
	// the request object holds the input parameter for the AUTH request
	//**************************************************************************//	
	var request = new csReference.RequestMessage();
	
	// Generate unique merchant reference code for this authorization request
	var merchantReferenceCode : String = order.UUID.toString();
	if (!empty(orderNo)) merchantReferenceCode = orderNo;
	// Return reference code always, to aid in debugging in case of request failure
	pdict.MerchantReferenceCode = merchantReferenceCode;
	
	CybersourceHelper.addCCAuthRequestInfoWB(request,billToObject,shipToObject,purchaseObject,subscriptionId,merchantReferenceCode, CybersourceHelper.getDigitalFingerprintEnabled(),order,pdict.CurrentShipmentId);		
	if(pdict.XID != null)
	{
		CybersourceHelper.addPayerAuthReplyInfo(request, pdict.CAVV, pdict.UCAFAuthenticationData, pdict.UCAFCollectionIndicator, pdict.ECIRaw, pdict.CommerceIndicator, pdict.XID);
	}
	
	/********************************/
	/* DAV-related WebService setup */
	/********************************/	
	var enableDAV : String = CybersourceHelper.getDavEnable();
	var approveDAV : String = CybersourceHelper.getDavOnAddressVerificationFailure();
	
	if( enableDAV=='YES' ) {
		var ignoreDAVResult = false;
		if( approveDAV=='APPROVE' ) {
			ignoreDAVResult = true;
		}
		CybersourceHelper.addDAVRequestInfo(request,billToObject,shipToObject,ignoreDAVResult);
	}
	/* End of DAV WebService setup */
	
	/* AVS Service setup */
	var ignoreAVSResult : Boolean = CybersourceHelper.getAvsIgnoreResult();
	var declineAVSFlags : String = CybersourceHelper.getAvsDeclineFlags();
	
	CybersourceHelper.addAVSRequestInfo(request,ignoreAVSResult,declineAVSFlags);
	/* End of AVS Service setup */
	
	writeOutDebugLog(request,orderNo);

	//**************************************************************************//
	// Execute Request
	//**************************************************************************//	
	var response = null;
	try
	{
		response = service.runTransaction(request);
	}
	catch(e)
	{
		Logger.getRootLogger().fatal("[CCAuthRequest] [FATAL]  Error in CCAuthRequestInfo request ( {0} )",e.message);
		
		//set placeholder reason code 0 and default system error message
		pdict.ReasonCode = 0;
		pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.trylater');
		
		// Return to user flow and log additional info if it's a timeout exception.
		if(e.message.indexOf("SocketTimeoutException") != -1)
		{
            Logger.getRootLogger().fatal("[CCAuthRequest] [FATAL] Error: A socket timeout exception occurred when sending the request. The service did not receive the request.");
            return PIPELET_NEXT;
		}
		
		// All other exceptions trigger error handling
		return PIPELET_ERROR;
	}
	
	if(response == null)
	{
		Logger.getRootLogger().fatal("[libCybersource.ds] Error in CCAuthRequest: null response");
		return PIPELET_ERROR;
	}
		
	//**************************************************************************//
	// Process Response
	//**************************************************************************//		
	pdict.Temp = protocolResponse( response );
	//pdict.Temp = getAvailableFunctions( service );
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.ReasonMessage = response.reasonMessage;
	pdict.Decision = response.decision;
	
	// Set the ID of a string resource in checkout.properties to display as human-readable error message
	switch(pdict.ReasonCode)
	{
		case 151: // Error: The request was received but there was a read timeout. This error does not include timeouts between the client and the server.
		case 2151: // Error: The request was received but there was a read timeout while connecting to ICS.
		case 152: // Error: The request was received, but a service did not finish running in time.
		case 2152: // Error: The request was received but there was a timeout connecting to ICS.
		case 209: // American Express Card Identification Digits (CID) did not match.
		case 211: // Invalid CVN.
		case 231: // Invalid account number.
		case 240: // The card type sent is invalid or does not correlate with the credit card number.
			
			pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.resubmit');
			break;
		
		case 101: // The request to ICS is missing one or more required fields. See the reply fields missingField_0...N for which fields are missing.
		case 2101: // The request to CPS is missing one or more required fields. See the reply fields missingField_0...N for which fields are missing.
		
			pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.missingfields');
			break;
		
		
		case 102: // One or more fields in the ICS request contain invalid data. See the reply fields invalidField_0...N for which fields are invalid.
		case 2102: // One or more fields in the CPS request contain invalid data. See the reply fields invalidField_0...N for which fields are invalid.
		
			pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.invalidfields');
			break;
		
		case 150: // Error: General ICS system failure.
		case 2150: // Error: General CPS system failure.
		case 234: // There is a problem with the information in your CyberSource account.
		case 236: // Processor failure.
		case 1123: // File Error Message during ADS sale or return. System error during account lookup in database.
		case 1909: // System error during ADS void. A system error occurred.
		
		 	pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.trylater');
			break;
		
		case 2153: // Error: The request was received but there was a read timeout connecting to ADS.
		case 2154: // Error: The request was received but there was a timeout connecting to ADS.
		case 250: // Error: The request was received, but there was a timeout at the payment processor.
		
		 	pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.trylaterorcontact');
			break;
		
		case 481: // The order is rejected by Decision Manager.
		
		 	pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.contact');
			break;
		
		case 201: // The issuing bank has questions about the request. You do not receive an authorization code programmatically, but you might receive one verbally by calling the processor. 
		case 203: // General decline of the card. No other information was provided by the issuing bank.
		case 204: // Insufficient funds in the account.
		case 205: // Stolen or lost card.
		case 207: // Issuing bank unavailable.
		case 208: // Inactive card or card not authorized for card-not-present transactions.
		case 210: // The card has reached the credit limit.
		case 221: // The customer matched an entry on the processor’s negative file
		case 232: // The card type is not accepted by the payment processor.
		case 233: // General decline by the processor.
		case 1121: // Account is not in the Alliance Data system
		case 1124: // Purchase decline.
		case 1134: // Transaction amount exceeded account's OTB (ADS "open to buy") amount
		case 1142: // The account is inactive and has been inactive longer than the limit specified on the strategy table.
		case 1160: // Purchase decline
		case 1195: // Purchase decline
		
		 	pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.donotretry');
			break;
		
		case 202: // Expired card. You might also receive this if the expiration date you provided does not match the date the issuing bank has on file.
		
		 	pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.expiredcard');
			break;
		
		case 237: // The authorization has already been reversed.
		case 239: // The requested transaction amount must match the previous transaction amount.
		case 480: // The order is marked for review by Decision Manager.
		case 1480: // Void already processed. A previous ADS void transaction was already processed successfully.
		case 1481: // Match not found. The ADS void attempted did not match to a previous transaction and failed.
			
			// No message
			pdict.DisplayMessageStatus = null;
			break;
		case 1125:
					pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.donotretry');
					break;
		case 1081:
					pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.donotretry');
					break;
					
		
		case 450: // The apartment number missing or not found.
		case 451: // The request contains insufficient the address information.
		case 452: // The house number or post office box identifier cannot be found on the specified street.
		case 453: // Multiple address matches were found.
		case 454: // The post office box identifier cannot be found or is out of range.
		case 455: // The route service identifier cannot be found or is out of range.
		case 456: // The street name cannot be found in the specified postal code
		case 457: // The postal code cannot be found.
		case 458: // The address cannot be verified or corrected.
		case 459: // Multiple address matches were found
		case 460: //  An address match cannot be found
		case 461: //  The character set is not supported by the address verification service.
		
					pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.deliveryaddresserror');
					break;
										
		default:
		
			pdict.DisplayMessageStatus = new dw.system.Status(dw.system.Status.ERROR, 'cybersource.error.donotretry');

	}
	
	// Record Desision Manager data in XML format for export (uses DecisionManagerDataAdapter.ds)
	var dma = new DecisionManagerDataAdapter();
	var dmResponse : XML = dma.getDecisionManagerResponse(response);
	pdict.DecisionManagerResponse = "<![CDATA["+dmResponse.toXMLString()+"]]>";
	
	if ( null != response.card )
	{
		pdict.MaskedAccountNumber = response.card.accountNumber;
	}
	
	if ( null != response.ccAuthReply )
	{
		pdict.AuthorizationAmount = response.ccAuthReply.amount;
		pdict.AuthorizationCode = response.ccAuthReply.authorizationCode;
		pdict.AuthorizationReasonCode = response.ccAuthReply.reasonCode.get();
		pdict.AuthorizationReconciliationID = response.ccAuthReply.reconciliationID;
		pdict.AVSCode = response.ccAuthReply.avsCode;
	}
	
	/**********************************************/
	/* DAV-related WebService response processing */
	/**********************************************/
	if( !empty(response.missingField) ) {
		pdict.MissingFieldsArray = response.missingField;
	}
	if( !empty(response.invalidField) ) {
		pdict.InvalidFieldsArray = response.invalidField;
	}	
	if(null != response.davReply){
		pdict.DAVReasonCode = response.davReply.reasonCode.get();
		
		if( !empty(response.davReply.standardizedAddress1) ) {
			var stdAddress : Object = new Object();
			stdAddress.firstName = pdict.shipTo.firstName;
			stdAddress.lastName = pdict.shipTo.lastName;
			stdAddress.address1 = response.davReply.standardizedAddress1;
			stdAddress.address2 = response.davReply.standardizedAddress2;
			stdAddress.city = response.davReply.standardizedCity;
			stdAddress.state = response.davReply.standardizedState;
			stdAddress.postalCode = response.davReply.standardizedPostalCode;
			stdAddress.country = response.davReply.standardizedCountry;
			pdict.StandardizedAddress = stdAddress;
		}
	}
	/* End of DAV response processing */
	
	//**************************************************************************//
	//Log response code specific data for further processing
	//**************************************************************************//
	var logTransactionData : String = " Order No = " +orderNo;
	logTransactionData += ", Cybersource Request ID = " +response.requestID;
	logTransactionData += ", Cybersource Request Token = " +response.requestToken;
	logTransactionData += ", Cybersource Reason Code = " +response.reasonCode.get();
	logTransactionData += ", Cybersource Decision = " +response.decision;
	 
	switch ( response.reasonCode.get() )
	{
		case 100:	
			Logger.info("[CCAuthRequest] [Cybersource Reson Code: 100] [INFO] " + logTransactionData + ", Successful transaction.");
			break;	
		case 101:	
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 101] [FATAL] " + logTransactionData + " Error Message = The request is missing one or more required fields in the request to CyberSource. The could be due to coding error since all required fields should be set by the COSubmit pipeline.");
			break;	
		case 102:								
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 102] [FATAL] " + logTransactionData + " Error Message = One or more fields in the request to cybersource contains invalid data. The could be due to coding error since all required fields should be first validated by the COSubmit pipeline.");
			break;	
		case 150:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 150] [FATAL] " + logTransactionData + " Error Message = Error: General system failure.");
			break;				
		case 151:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 151] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a server time-out. This error does not include time-outs between the client and the server. ");
			break;				
		case 152:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 152] [FATAL] " + logTransactionData + " Error Message = Error: The request was received but there was a service time-out. - ");
			break;	
		case 234:
			Logger.getRootLogger().fatal("[CCAuthRequest] [Cybersource Reson Code: 234] [FATAL] " + logTransactionData + " Error Message = There is a problem with your CyberSource merchant configuration. - Please verify the Cybersource Custom preference in the Business Manager");
			break;
		case 400:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 400] [WARN] " + logTransactionData + " Error Message = The fraud score exceeds your threshold. - Customer support to handle the order. ");
			break;
		case 480:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 480] [WARN] " + logTransactionData + " Error Message = The order is marked for review by Decision Manager. - ");
			break;						
		case 481:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code: 481] [WARN] " + logTransactionData + " Error Message = The order is rejected by Decision Manager. - Customer support to handle the order. ");
			break;			
		default:
			Logger.warn("[CCAuthRequest] [Cybersource Reson Code:" + response.reasonCode.get() +"] [WARN] " + logTransactionData + ", Error Message = Authorization Denied - ");
			break;
	}
	
    return PIPELET_NEXT;
}

function protocolResponse( response ) : HashMap
{
	var debug : Boolean = Site.getCurrent().getCustomPreferenceValue("CsDebugCybersource");
	if( true || debug )
	{
		var arr : HashMap = new HashMap();
		var xx : String;
		for ( xx in response )
		{
			arr.put( xx, response[xx] );
		}
		for ( xx in response.payPalPaymentReply )
		{
			trace( "checking " + xx );
			try
			{
				arr.put( "PayPalPaymentReply." + xx, response.payPalPaymentReply[xx] );
			}
			catch ( exception )
			{
				arr.put( "PayPalPaymentReply." + xx, " caused ex " + exception );
			}
		}
		
		var nullList : Array = new Array();
		var qq : String;
		var iter : Iterator;
		var retMap : HashMap = new HashMap();
		for ( iter = arr.keySet().iterator(); iter.hasNext(); )
		{
			qq = iter.next();
			if ( arr.get( qq ) == null )
			{
				nullList.push( qq );
				// arr.remove( qq );
			} 
			else
			{
				retMap.put( qq, arr.get( qq ) );
			}
		} 
		if ( qq.length > 0 )
		{
			retMap.put( "<<NullList>>", nullList ); 
		}
		return retMap;
	}
}

function writeOutDebugLog(request : Object, orderNo : String)
{
	var debug : Boolean = Site.getCurrent().getCustomPreferenceValue("CsDebugCybersource");
	if( debug )
	{
		var dir : dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "cybersourcelogs").mkdir();
		var file :  dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "cybersourcelogs" + dw.io.File.SEPARATOR + orderNo + ".txt");
		var fw : dw.io.FileWriter = new  dw.io.FileWriter(file);
		fw.writeLine("REQUEST DATA SENT TO CYBERSOURCE");
		fw.writeLine("billTo.firstName " + request.billTo.firstName);
		fw.writeLine("billTo.lastName " + request.billTo.lastName);
		fw.writeLine("billTo.street1 " + request.billTo.street1);
		fw.writeLine("billTo.city " + request.billTo.city);
		fw.writeLine("billTo.state " + request.billTo.state);
		fw.writeLine("billTo.postalCode " + request.billTo.postalCode);
		fw.writeLine("billTo.country " + request.billTo.country);
		fw.writeLine("shipTo.firstName " + request.shipTo.firstName);
		fw.writeLine("shipTo.lastName " + request.shipTo.lastName);
		fw.writeLine("shipTo.street1 " + request.shipTo.street1);
		fw.writeLine("shipTo.city " + request.shipTo.city);
		fw.writeLine("shipTo.state " + request.shipTo.state);
		fw.writeLine("shipTo.postalCode " + request.shipTo.postalCode);
		fw.writeLine("shipTo.country " + request.shipTo.country);
		fw.writeLine("Currency " + request.purchaseTotals.currency);
		fw.writeLine("grandTotalAmount " + request.purchaseTotals.grandTotalAmount);
		fw.writeLine("taxAmount " + request.purchaseTotals.taxAmount);
		fw.writeLine("card fullname " + request.card.fullName);
		
		fw.flush();
		fw.close();
	}
}