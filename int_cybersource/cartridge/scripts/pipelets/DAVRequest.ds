/**
* Performs the validation of the addresses of a given basket.
*
* @input Basket : dw.order.LineItemCtnr The basket whose address should be validated
* @input  billTo : Object
* @input  shipTo : Object
* @input IsServiceBenchCheckout : Boolean
*
* @output Decision : String The decision of the complete request, one of ACCEPT, REJECT, or ERROR
* @output ReasonCode : Number The global reason code returned by Cybersource (100 = Success)
* @output RequestID : String The request id generated by Cybersource
* @output RequestToken : String the token generated by Cybersource
* @output DAVReasonCode : Number The DAV reason code returned by Cybersource (100 = Success)
* @output ResponseAddress : Object
*
* Author: Don Rivard
*/

var sf = require("bc_serviceframework");
require("../services/DAVRequestService");

importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.rpc );
importPackage( dw.util );

function execute( pdict : PipelineDictionary ) : Number
{
	
	var DAVRequestService = sf.getService('CybersourceService');
	var service = new DAVRequestService();
	var isServiceBenchCheckout : Boolean = empty(pdict.IsServiceBenchCheckout) || !pdict.IsServiceBenchCheckout ? false : true ;
    // read pipeline dictionary input parameter
    var basket : LineItemCtnr = pdict.Basket;
	
	if( basket == null && !isServiceBenchCheckout){
		Logger.error("Please provide a Basket!");
		return PIPELET_ERROR;
	}else if ( basket == null && isServiceBenchCheckout ){
		basket = BasketMgr.getCurrentOrNewBasket();
	}

	var billToObject: BillTo_Object = pdict.billTo;
	var shipToObject: ShipTo_Object = pdict.shipTo;
	
	var DAVrequest:Object 	= new Object();
	DAVrequest.billToObject = billToObject;
	DAVrequest.shipToObject = shipToObject;
	DAVrequest.basket 		= basket;
	
	service.call(DAVrequest);

	var response = service.response;
	
	if(response == null){
		pdict.ReasonCode = 0;
		return PIPELET_ERROR;
	}
	
	pdict.RequestID = response.requestID;
	pdict.RequestToken = response.requestToken;
	pdict.ReasonCode = response.reasonCode.get();
	pdict.Decision = response.decision;
	
	if(null != response.davReply){
		pdict.DAVReasonCode = response.davReply.reasonCode.get();
		var responseAddress : Object 	= new Object();
		if(null != response.davReply.standardizedAddress1 && null != response.davReply.standardizedCity && null != response.davReply.standardizedState &&  null != response.davReply.standardizedCountry){
			responseAddress.address1 	= response.davReply.standardizedAddress1;
			if(response.davReply.standardizedAddress2 != null){
				responseAddress.address2 	= response.davReply.standardizedAddress2;
			}else{
				responseAddress.address2 = '';
			}
			responseAddress.aptNo 		= response.davReply.standardizedAddressNoApt;
			responseAddress.city 	 	= response.davReply.standardizedCity;
			responseAddress.state	 	= response.davReply.standardizedState;
			responseAddress.postalCode	= response.davReply.standardizedPostalCode;
			responseAddress.country  	= response.davReply.standardizedCountry;
			pdict.ResponseAddress 	 = responseAddress;
		}else{
			pdict.ResponseAddress 	 = null;
		}
	}
	if(responseAddress.address1!= shipToObject.street1 || responseAddress.city != shipToObject.street1 || responseAddress.state != shipToObject.state || responseAddress.postalCode != shipToObject.PostalCode || responseAddress.country != shipToObject.country ){
		return PIPELET_ERROR;
	}
	else{
		return PIPELET_NEXT;
	}
	
}
