#
# The build.properties contains all information needed for a specific build and
# deployment. You should set this file up by copying the build.properties.template
# file to build.properties and customize for your needs.
#
# DO NOT CHECK build.properties INTO SOURCE CONTROL. Otherwise you will overwrite
# others properties which will screw up their builds. Best not to check in local
# build.properties.
#
# Example:
# build.project.name=sample
# build.project.version=latest
# build.target.environment=dev14
#

# Tells the build what dir to look in for the dependency version file and environment
# file. The project name basically refers to a dir name in the projects directory. I.e.
# the build will look in a dir named
#
# build_cs/cartridge/build/projects/<value of build.project.name>/
#
# for the actual build config files.
build.project.name=sample

# This property will be used to select the dependency file based on the following path:
#
# build_cs/cartridge/build/projects/<value of build.project.name>/dependency.<value of build.project.version>.properties
#
# This allows you to create arbitrary selections of versions of SVN projects and deploy them together. The dependency
# file contains a list of comma separated SVN projects/versions so for example the property file called
# dependency.latest.properties contains a list of trunk versions from the source tree i.e. :
#
# http://svnrepurl/projects/customproject/trunk,
# http://svnrepurl/projects/sample/trunk,
# http://svnrepurl/projects/pim/trunk,
#
# whereas a file named dependency.rel_1_0_1.properties would typically use tags of the trunk to create a repeatable deployment
# project. In this case where the file is named dependency.rel_1_0_1.properties build.project.version would be set to rel_1_0_1
# and the file may contain something like:
#
# http://svnrepurl/projects/customproject/tags/3_0_1,
# http://svnrepurl/projects/sample/tags/2_1_1,
# http://svnrepurl/projects/pim/tags/1_0_0
#
# Full control of the dependency URLs makes it possible to create a final build version comprising of
# several different SVN locations and/or tags.
#
# If a dependency file based on the version number - i.e. "dependency.${build.project.version}.properties" -
# is not found, then "dependency.DEFAULT.properties" will be used as a fallback.
#
build.project.version=VERSION

# This property contains the details of your Demandware instance you will upload the site to. Generally
# you will just need to change the URL, username and password for a new environment. The property controls
# which environment file to select so the build will be looking for a file named:
#
# build_cs/cartridge/build/projects/<value of build.project.name>/environment.<value of build.target.environment>.properties
#
# This allows you to change the property here to control what pre-defined instance (or instances, comma-separated) you wish to deploy to.
#
build.target.environment=INSTANCE

# This property specifies the directory on the local machine that
# all files generated by the build should be written to.
#
local.build.temp=C:\\temp\\build

# This property specifies svn version of the respository you are connecting to (e.g. "1.4", "1.5", "1.6")
#
svn.repository.version=1.6

# Use code only property to not download the site templates folder from SVN.
# Speeds up deployment if target is data master.
build.project.codeonly=true

# Use this property to control whether javascript files in the static files cartridge should
# be compressed or not.
# Optionally you can define the compressor to be used, currently "yui" (default) and "closure" are supported 
build.optimize.js=true
#build.optimize.js.compressor=closure

# Use this property to control whether a <static_file_cartridge>_debug cartridge will be created that will contain
# the original javascript files before they were compressed.
build.optimize.js.debug=true

# Use this property to control whether css files in the static files cartridge should compressed
# or not.
build.optimize.css=true

# Use this property to control whether a <static_file_cartridge>_debug cartridge will be created that will contain
# the original css files before they were compressed.
build.optimize.css.debug=true

# Add tagging to the ISML template which will allow to show and edit resource information
# or not.
resource.tagging.enabled=false

# Use this property to control inclusion of test code in the deployment.
# If set to false, any cartridge prefixed with test_ in the name will be
# excluded and any test_site_templates will also be excluded.
#
include.test.deployments=false

# Use this property to control encryption of passwords in dependency files.
# If enabled, passwords will be automatically encrypted upon the first run of any major target.
# A DES key file will be written to ${local.build.temp}.
#
password.encryption=true

# Use this property to specify if 2-factor authentication is turned on in your staging instance.
# If enabled, the Upload tasks will upload using the secure 2-factor URL with the
# keystore.file and keystore.password values specified in the environment properties file.
#
twofactor.enabled=false

# Use this property to enable logging.
# A log file will be written to ${local.build.temp}.
#
logging.enabled=true

# This property specifies location path to the installed git executable.  (OPTIONAL)
# You can leave it to "git" when you have specified an environment variable for this.
# IMPORTANT: You need to setup the Git SSH key accordingly. Also you need to set up an environment variable (HOME=%USERPROFILE%)
# pointing to your Git home directory to make it possible for Git to find the SSH Key.
# See http://git-scm.com/book/en/Git-on-the-Server-Generating-Your-SSH-Public-Key
#git.executable.path=C:\\Program Files (x86)\\Git\\cmd\\git

# This property will switch the command used for exporting from a Git repo from "clone" to "archive". (OPTIONAL)
# Archiving rather will result in a much faster export as cloning will download the whole repo including Git artifacts.
# Most Git hosts block archiving for http connections, and only allow it for ssh.
# Please check that your Git repository enables archiving before enabling.
# At time of writing BitBucket allows ssh archiving and GitHub does not allow it at all.
#git.archive.enabled=true

# Use these properties if you are behind a proxy. (OPTIONAL)
#proxy.host=myproxyhost.de
#proxy.port=80

# The cartridge (or cartridges, comma-separated) that holds the buildinfo template & holds buildinfo config template. (OPTIONAL)
#buildinfo.cartridge=app_sample

# The user that is shown in build info file (OPTIONAL)
#build.project.user=Client Services Build Manager

# This property specifies the root path of the metadata file (for the RunUploadMetadata target). (OPTIONAL)
#
#local.metadata.root=C:\\projects\\sample\\src\\sites\\site_template\\meta

# This property specifies the metadata filename (for the RunUploadMetadata target). (OPTIONAL)
#
#local.metadata.filename=Metadata.xml

# This property specifies the relative path to the cartridges folder on svn/git if the folder structure is not like described in the build.xml
# e.g. "/mycartpath". If not set "/cartridges" is assumed; use "/" for root (OPTIONAL)
#
#cartridges.root.relative=/

# This property specifies the name of the cartridges where static files should be compressed. (OPTIONAL)
# Usually this is the storefront application or design cartridge. Multiple cartridges may be separated by a comma.
#
#static.files.cartridges=app_sample,app_sample_ui


# Use this property to enable concatenation of js and css files
# Concatenation is done for the cartridges specified in static.files.cartridges
static.files.concatenate=false

# Use this property to control whether a <static_file_cartridge>_debug cartridge will be created that will contain
# the original files before they were concatenated.
build.optimize.concatenate.debug=true

# Use this property to enable compilation of less files and replacement of href="*.less" occurrences in isml files
# Compilation is done for the cartridges specified in static.files.cartridges
compile.less.files=false

# Use this property to enable make use of *.dependson definitions in the cartridge specific properties files
# The task tries to determine the full list of dependencies for a cartridge and stores that list in a 
# cartridge.[cartridgeID].dependson property so it can be used everywhere in the build process.
#
# The below depicts how it works:
#
#	    app_mysite_richUI.properties 
#	      demandware.cartridges.app_mysite_richUI.multipleLanguageStorefront=true
#	      demandware.cartridges.app_mysite_richUI.id=app_mysite_richUI
#	      demandware.cartridges.app_mysite_richUI.dependson=app_mysite_core
#	
#	    app_mysite_core.properties
#	       demandware.cartridges.app_mysite_core.multipleLanguageStorefront=true
#	       demandware.cartridges.app_mysite_core.id=app_mysite_core
#	       demandware.cartridges.app_mysite_core.dependson=int_mysite:bc_bazaarvoice:bc_ecircle
#	
# The dependencies for app_mysite_richUI resolve to app_mysite_core:int_mysite:bc_bazaarvoice:bc_ecircle. 
cartridges.dependencies.resolve=false

# Use this property to check if all referenced cartridges are really available in the built
cartridges.dependencies.check=false

# Use this type of proerty to override the result of the automatic dependency resolving 
# process or simply define dependencies for cartridges independent from the [cartridgeID].properties file
#cartridge.app_storefront_core.dependson=
#cartridge.app_storefront_richUI.dependson=app_storefront_core

# Use this property to control whether images and other files referenced by URL should be 
# base64 encoded and embedded in css files.
build.optimize.css.embed.images.enabled=false
# Use this property to define whether mhtml compliant css should be generated
build.optimize.css.embed.images.mhtml=false
# Use this property to define if missing images should be kipped
build.optimize.css.embed.images.skipMissing=false
# Use this property to define the maximum image file size
build.optimize.css.embed.images.maxImageSize=4096
