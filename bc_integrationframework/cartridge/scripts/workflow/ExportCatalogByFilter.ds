/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*

* For example:
* @input catalogID : String
* @input isaccessory : Boolean  
* @input supportonly : Boolean
* @input warranty : Boolean
*/
 
 importPackage( dw.system );
 importPackage( dw.order );
 importPackage( dw.util );
 importPackage( dw.web );
 importPackage( dw.net );
 importPackage( dw.catalog );
 importPackage( dw.object );
 importPackage( dw.io );
 importPackage( dw.content );

function execute( pdict : PipelineDictionary ) : Number 
{
	var fileWriter : FileWriter = null;
	var itemsNo : Number = 0;	
	var initialfilename : String = dw.system.Site.getCurrent().ID +'_' + pdict.catalogID + '_' + dw.util.StringUtils.formatCalendar(dw.system.System.getCalendar(), 'yyyyMMdd_HHmmssSSS')+'.xml';
	var archivefilename : String = dw.system.Site.getCurrent().ID +'_' + pdict.catalogID + '_' + dw.util.StringUtils.formatCalendar(dw.system.System.getCalendar(), 'yyyyMMdd_HHmmssSSS')+'.xml';
	try{
		var catalogimport : dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "src" + dw.io.File.SEPARATOR + "catalog" + dw.io.File.SEPARATOR  + initialfilename);
		
		if( catalogimport.exists() ){
			var archivecatalog : dw.io.File = new dw.io.File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "src" + dw.io.File.SEPARATOR + "catalog" + dw.io.File.SEPARATOR + archivefilename);
			catalogimport.renameTo(archivecatalog);
			catalogimport.createNewFile();
		}else{
			catalogimport.createNewFile();
		}
			
		fileWriter = new FileWriter(catalogimport,'UTF-8');
		var xmlwriter : XMLStreamWriter = new XMLStreamWriter(fileWriter);
		var catalogfromWFC = CatalogMgr.getCatalog(pdict.catalogID);
		var productList : SeekableIterator = ProductMgr.queryProductsInCatalog(catalogfromWFC);
		
		xmlwriter.writeRaw('<?xml version="1.0" encoding="utf-8"?>\n<catalog xmlns="http://www.demandware.com/xml/impex/catalog/2006-10-31" catalog-id="' +pdict.catalogID+'">\n');
		
		while(productList.hasNext()) {
			var product : Product = productList.next();
			var isMaster : Boolean = product.isMaster();
			var isVariant : Boolean = product.isVariant();
			var productID : String = product.ID;
			var includeProducts : Boolean = true;
			if(!pdict.supportonly){
				if(product.custom.supportOnly){
					includeProducts = false;
				}
			}
			if(!pdict.warranty){
				if(product.custom.isWarranty){
					includeProducts = includeProducts && false;
				}
			}
			if(!pdict.isaccessory){
				if(product.custom.isAccessory){
					includeProducts = includeProducts && false;
				}
			}
			if(includeProducts){
				xmlwriter.writeRaw('<product product-id="' + productID +'">\n\t');
			
				if(!empty(product.EAN) && product.EAN != null){	
					xmlwriter.writeRaw('<ean>' + product.EAN +'</ean>\n');
				}	
				if(!empty(product.UPC) && product.UPC != null){
					xmlwriter.writeRaw('<upc>' + product.UPC +'</upc>\n');	
				}
				if(!empty(product.stepQuantity.value) && product.stepQuantity.value != null){
					xmlwriter.writeRaw('\n<step-quantity> ' + product.stepQuantity.value +' </step-quantity>');
				}
				if(!empty(product.shortDescription) && product.shortDescription != null){
					xmlwriter.writeRaw('\n<short-description><![CDATA['+product.shortDescription+']]> </short-description>');
				}
				if(!empty(product.name) && product.name != null){
					xmlwriter.writeRaw('\n<display-name xml:lang="x-default">' +product.name+ '</display-name>');
				}
				if(!empty(product.onlineFlag) && product.onlineFlag != null){
					xmlwriter.writeRaw('\n<online-flag>' +product.onlineFlag +'</online-flag>');	
				}
				if(!product.searchable){
					xmlwriter.writeRaw('\n<searchable-flag>' +product.searchable +'</searchable-flag>');	
				}
				if(!empty(product.pageDescription) && product.pageDescription != null){
					xmlwriter.writeRaw('\n<page_description><![CDATA['+product.pageDescription+']]></page_description>');
				}
				if(!empty(product.pageURL) && product.pageURL != null){
					xmlwriter.writeRaw('\n<page_url><![CDATA['+product.pageURL+']]></page_url>');
				}
				if(!empty(product.pageTitle) && product.pageTitle != null){
					xmlwriter.writeRaw('\n<page_title><![CDATA['+product.pageTitle+']]></page_title>');
				}
				xmlwriter.writeRaw('\n<page-attributes/>');
				xmlwriter.writeRaw('\n<custom-attributes>');
				if ('listOfCompetitiveRetailers' in product.custom && product.custom.listOfCompetitiveRetailers != null){
					var retail : ArrayList = new ArrayList();
						retail = product.custom.listOfCompetitiveRetailers;
					var competitiveRetail : String = '';
					for each(var compretail : String in retail) {
						if(!empty(compretail)) {
							competitiveRetail += "<value>"+compretail.toString()+"</value>";
						}	
					}
				xmlwriter.writeRaw('\n<custom-attribute attribute-id="listOfCompetitiveRetailers"><![CDATA['+competitiveRetail+']]></custom-attribute>');
			  }
				
				if ('UMN' in product.custom && product.custom.UMN != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="UMN">' + product.custom.UMN +'</custom-attribute>');
				}
				if ('dimWeight' in product.custom && product.custom.dimWeight != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="dimWeight">' + product.custom.dimWeight +'</custom-attribute>');
				}
				if ('disable_dynamic_price' in product.custom && product.custom.disable_dynamic_price != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="disable_dynamic_price">' + product.custom.disable_dynamic_price +'</custom-attribute>');
				}
				if ('isAccessory' in product.custom && product.custom.isAccessory != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="isAccessory">' + product.custom.isAccessory +'</custom-attribute>');
				} 
				if ('priceSpiderExported' in product.custom && product.custom.priceSpiderExported != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="priceSpiderExported">' + product.custom.priceSpiderExported +'</custom-attribute>');
				}  
				if ('faqs' in product.custom && product.custom.faqs != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="faqs">"faqs"</custom-attribute>');
				}   
				if ('productLegacyURL' in product.custom && product.custom.productLegacyURL != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="productLegacyURL">' + product.custom.productLegacyURL +'</custom-attribute>');
				}
				if ('supportOnly' in product.custom && product.custom.supportOnly != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="supportOnly">' + product.custom.supportOnly +'</custom-attribute>');
				}
				if ('isWarranty' in product.custom && product.custom.isWarranty != null){
					xmlwriter.writeRaw('\n<custom-attribute attribute-id="isWarranty">' + product.custom.isWarranty +'</custom-attribute>');
				}
				
				xmlwriter.writeRaw('\n</custom-attributes>');
				if(!empty(product.getClassificationCategory()) && product.getClassificationCategory() != null){
					xmlwriter.writeRaw('\n<classification-category>' + product.getClassificationCategory().ID+'</classification-category>');
				}
				if(!empty(product.getPrimaryCategory()) && product.getPrimaryCategory() != null){
					xmlwriter.writeRaw('\n<primary-category>' + product.getPrimaryCategory().ID+'</primary-category>');
				}
				xmlwriter.writeRaw('\n</product>');
			}
			itemsNo++;
		}
		xmlwriter.writeRaw('\n</catalog>');
	}
	finally{
		if(xmlwriter != null){
			xmlwriter.flush();
			xmlwriter.close();
		}
	}
	
   return PIPELET_NEXT;
}
